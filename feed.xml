<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jumly integration</title>
    <description>Attempting jumly.js integration into jekyll.
</description>
    <link>https://cat73220.github.io/</link>
    <atom:link href="https://cat73220.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 23 Mar 2023 06:56:03 +0000</pubDate>
    <lastBuildDate>Thu, 23 Mar 2023 06:56:03 +0000</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>埋め込みについて諸々：Mermaid</title>
        <description>&lt;p&gt;&lt;a href=&quot;/2015/05/13/mermaid-integration.html&quot;&gt;Mermaid integration&lt;/a&gt;から８年経った。隆盛を極めるインターネット業界でも良いものは残る。Mermaidもバージョンを重ねて、その地位を不動のものとして残っていた。&lt;/p&gt;

&lt;h3 id=&quot;モジュール-javascript&quot;&gt;&lt;strong&gt;モジュール javascript&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;いつの頃からか、Mermaidで作ったフローチャートの線が消えていた。設定や組み込み方の問題を疑って色々調べたが見当たらないので、バージョンアップを試した。結果、バージョンアップで線は出るようになった。&lt;/p&gt;

&lt;p&gt;この対応の途中で気づいたのだが、バージョンがかなり進んでいる。8.0.0へのバージョンアップで用は足りたのだが、なるべく最新版を使いたい。一方、問題がでたものはに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mermaid.full.js&lt;/code&gt;を直にこのブログに組み込んでいて、一見してバージョンが判らない。中を見ても判然としなかった。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com /mermaid-js/mermaid&lt;/code&gt;を辿ると、バージョン0.4.0辺りのようだった。mermaidを組み込んだブログの日付で判断した。今や、開発バージョンが10であり、８年ほど経っている。古すぎ。&lt;/p&gt;

&lt;p&gt;８年ほど前とはHTMLの仕様も変わっていて、scriptタグに module なぞというオプションも与えられるようになっていて、面白い。対応するものが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.esm.mjs&lt;/code&gt;なる拡張子だ。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ECMA Script Module . Module Java Script&lt;/code&gt;かな。javascriptの仕様自体に全部コミコミのモジュールという機能を拡張したようだ。色々調べてみた。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.esm&lt;/code&gt;は拡張子じゃない。ファイル名の一部で、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ECMA Script Module(EC Module)&lt;/code&gt;であることを明確にしているに過ぎず、mermaid-jsチームが慣例的に採用している命名方法にすぎない。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mjs&lt;/code&gt;は想像通り&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module Java Script&lt;/code&gt;の略だ。&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Modules&quot;&gt;このページ&lt;/a&gt;に詳しく書かれている。想像が行き過ぎていたのは「モジュールがこの８年の間に拡張された仕様」と思ってしまった辺りだ。2015年より以前から&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt;であってもモジュール扱いしていた。この８年の間に、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt;を接頭してモジュールであることをより明確にしょう、となったに過ぎない。&lt;/p&gt;

&lt;p&gt;これで、バージョン8の中盤辺りから採用され始めた&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mjs&lt;/code&gt;が何なのか大体の解釈がついたので、安心して利用可能だ。何らかの新フォーマットと誤認し不安を覚えたことが払拭できた。ために、中を覗いてみたらアグリファイされた常日頃利用している、scriptタグのsrcプロパティに与える&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt;等と同じであった。&lt;/p&gt;

&lt;h3 id=&quot;組み込み&quot;&gt;&lt;strong&gt;組み込み&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;投稿などで利用するための設定に幾通りかある。&lt;/p&gt;

&lt;h4 id=&quot;_configymlliquidタグjekyll-mermaid&quot;&gt;&lt;strong&gt;_config.yml＋Liquidタグ（jekyll-mermaid）&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-mermaid&lt;/code&gt;プラグインをインストールして、_config.ymlで利用を宣言＆設定する方法。&lt;/p&gt;

&lt;p&gt;文中では{% mermaid %}…&lt;mermaid syntax=&quot;&quot;&gt;...{% endmermaid %}で利用する。Liquidタグ囲う。jekyllを利用するに当たり自然な感じだ。&lt;/mermaid&gt;&lt;/p&gt;

&lt;p&gt;_config.ymlのmermaidセクション・srcにmermaid.jsへのURLを与える。導入当初の経緯は忘れたが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/plugins/mermaid.full.js&lt;/code&gt;を与えていた。インストールも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/plugins&lt;/code&gt;に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mermaid.full.js&lt;/code&gt;をコピーした。この設定で、jekyll-mermaidプラグインが{% mermaid %}タグを適宜htmlタグ、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mermaid.full.js&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt;タグへ置き換える。&lt;/p&gt;

&lt;h4 id=&quot;bodyの直後にscriptタグhtmlタグその１&quot;&gt;&lt;strong&gt;&amp;lt;/body&amp;gt;の直後にscriptタグ＋htmlタグその１&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;の記述がある&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout&lt;/code&gt;か、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt;配下の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt;ファイルにscriptタグを追加してmermaidを読み込む。利用は直にdivタグやpreタグを記載してタグの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mermaid&lt;/code&gt;とする。そのタグ内にmermaidシンタックスで図を記載する。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-mermaid&lt;/code&gt;プラグインがLiquidタグを置き換えてくれることを手動で行うわけだ。&lt;/p&gt;

&lt;p&gt;scriptタグの設置は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/default.html&lt;/code&gt;で&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cat73220.github.io/mermaid.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;投稿中&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% mermaid %}
flowchart LR
    A[Start] -- note for a line --&amp;gt; B((a path))
    A --&amp;gt; C(The other path)
    B --&amp;gt; D{END}
    C --&amp;gt; D
{% endmermaid %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;bodyの直後にscriptタグhtmlタグその２&quot;&gt;&lt;strong&gt;&amp;lt;/body&amp;gt;の直後にscriptタグ＋htmlタグその２&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;上述の２方法は、blogの投稿(post)中では問題ない。しかし、portalのportfolio・projectX.mdでは旨く行かない。初めてmermaidをproject2.mdに記載したときには表示されず当惑した。調査すると、mermaid自体はhtml内に存在していて当該箇所(divタグに置き換わる)のサイズが１６ピクセル四方になり小さすぎて視認できなかった。試しに、portfolio本体側に記載すると問題なく現れる。サイズの計算を追跡し始めて、しばらくしたところで閃いた。portfolio＋projectX.mdはbootstrap・modalで実装されている。portalページが画面に写った際、表示されていない。portfolioセクションのプロジェクトをクリックすると現れる、bootstrap・modalだ。一方、mermaidはportalページが一番はじめに画面に写ったときにhtmlタグ・クラスが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mermaid&lt;/code&gt;のhtmlタグをグラフ描画する。projectX.mdはこタイミングでサイズ０なので計算結果もサイズ０となり紆余曲折あって１６ピクセル四方の極小さい範囲の描画になってしまう。&lt;/p&gt;

&lt;p&gt;bootstrap・modalのイベントに’show.bs.modal’がある。表示&lt;strong&gt;される&lt;/strong&gt;ときに実行されるイベントだ。このコールバックで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mermaind.init()&lt;/code&gt;を実行してみることにした。強調したように表示&lt;em&gt;される&lt;/em&gt;ときでは、まだ尚早だ。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shonw.bs.modal&lt;/code&gt;もある。表示が&lt;strong&gt;完了&lt;/strong&gt;で実行される。旨く行った。だが、まだ足りない。project2.mdだけならばこれで良いのだが、別のproject3.mdとかproject6.mdでも利用したい。個別のhtmlタグにだけ&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mermaid.init&lt;/code&gt;の実行を制限したい。ソースを追跡すると「引数にjQueryスタイルのセレクタを記述できる」とある。指定タグだけに制限する方法は判った。ページが表示されたときにmermaidの置き換えが起きないようにするには&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mermaid.initialize&lt;/code&gt;の引数に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{startOnLoad: false}&lt;/code&gt;を与えればよい。「起動時に変換」を無効に。&lt;/p&gt;

&lt;p&gt;文中は&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;project2-mermaid&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
flowchart LR
    A[Start] -- note for a line --&amp;gt; B((a path))
    A --&amp;gt; C(The other path)
    B --&amp;gt; D{END}
    C --&amp;gt; D
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;mermaid変換を実行するためにdivタグのidを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project2-mermaid&lt;/code&gt;とした。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portal/portofolio/projectX.md&lt;/code&gt;等はファイル中冒頭に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link&lt;/code&gt;属性があり、これがmodalのidとなる。&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal ...&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;linkの文字列&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　：&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;scriptタグの設置は同様に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/default.html&lt;/code&gt;で&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cat73220.github.io/mermaid.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startOnLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.modal#automation-computerization&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;shown.bs.modal&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#project2-mermaid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mermaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#team-mermaid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;思うように動作するようになった。これをjekyllプラグインで埋め込みを自動化したい。&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/mermaid/2023/03/23/0-mermaid-integration.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/mermaid/2023/03/23/0-mermaid-integration.html</guid>
        
        
        <category>learning</category>
        
        <category>mermaid</category>
        
      </item>
    
      <item>
        <title>CNAMEファイル：github-pagesのカスタムdomain化</title>
        <description>&lt;p&gt;Actionsでデプロイすると &lt;strong&gt;リポジトリのカスタムドメイン設定&lt;/strong&gt; が無効になった・・・薄々気がついていたのだけど&lt;/p&gt;

&lt;h4 id=&quot;cnameファイルgithub-pagesサイトのカスタムdomain&quot;&gt;&lt;strong&gt;CNAMEファイル：github-pagesサイトのカスタムdomain&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;デプロイ直後に cat73220.github.io リポジトリを確認すると、案の定、CNAMEファイルが消失していた。同リポジトリの Setting - pages - カスタムドメイン 設定も空欄となっていた。デプロイすると消えるよなと予感はあった。&lt;/p&gt;

&lt;p&gt;改めて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HW/.github/workflow/deploy.xml&lt;/code&gt; を読み下してみた。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat73220.github.io.git&lt;/code&gt; をcloneする前後で期待は裏切られていた。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -rf&lt;/code&gt; で github-pagesサイトはまっさらにされ、次の &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone --no-checkout &lt;/code&gt; は、オプションの通りファイルは何もチェックアウトしない。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt;ディレクトリだけチェックアウトする。そう、直前までに完了していた&lt;strong&gt;リポジトリの Setting - pages - カスタムドメイン 設定&lt;/strong&gt;は消し去られるのだ。&lt;/p&gt;

&lt;p&gt;読み進めると、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll・・・&lt;/code&gt;辺りで、何かできればいいかな、と。試しにlocalhostでblog/CNAMEを追加して、_site/CNAMEが現れるか試してみた。localhostでは想定通りにCNAMEファイルは出来上がる。deploy.xmlに戻って、_siteディレクトリが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat73220.github.io&lt;/code&gt;であることを再確認し、デプロイしてみた。&lt;/p&gt;

&lt;h4 id=&quot;大丈夫だった&quot;&gt;&lt;strong&gt;大丈夫だった&lt;/strong&gt;&lt;/h4&gt;
</description>
        <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/github/2023/03/20/2-github-custome-domain.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/github/2023/03/20/2-github-custome-domain.html</guid>
        
        
        <category>learning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>github-pagesのカスタムdomain化</title>
        <description>&lt;p&gt;文章打ちばかりしていて飽きたので毛色の違うことをしてみることにした・・・cloudの設定は嫌いではあるが&lt;/p&gt;

&lt;h4 id=&quot;github-pagesサイトのカスタムdomain&quot;&gt;&lt;strong&gt;github-pagesサイトのカスタムdomain&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;タイトルで大体、しようとしてることは判るのだが。有り体に言えば、XXXX.github.ioではなく自らが取得してるドメイン名で、XXXX.github.ioサイトを見られるようにしよう、ということである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.github.com/ja/pages&quot;&gt;GitHubページ&lt;/a&gt;の&lt;a href=&quot;https://docs.github.com/ja/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages&quot;&gt;カスタムドメインを構成する&lt;/a&gt;に全部書いてある。&lt;/p&gt;

&lt;p&gt;個人的に舌足らずだと感じた箇所を残しておく。&lt;/p&gt;

&lt;p&gt;apexドメインのDNSサーバーへの設定で、Aレコードに与える値にIPしか提示されていないところ。&lt;/p&gt;

&lt;p&gt;まず、このIPの目的の解説が欲しかった。全世界からこのIPがアクセスされるとgithub-pagesとして登録されているリポジトリのカスタムドメイン設定が参照されて、設定があった場合は適切にそのgithub-pagesリポジトリを利用する、みたいな解説がほしい。「・・・あなたが所有するドメインに変更することができます」と説明はあるが、これだけでは足りない。&lt;/p&gt;

&lt;p&gt;また、DNSサーバーに与える値は、これらのIPしか示されていない。利用しているDNSサーバーには「host」という欄が必須でここに’@(Bare domain/Naked domain’を与えないとならない。この辺りの詳細な設定内容はDNSサーバー側の解説を読むようにとある。DNSサーバーの解説には探し出せなかった。調べると（調べないとならなかった）、一般的なことではあった。知っていることが前提な内容だったのは理解したが、ヒントくらいほしいと思った。&lt;/p&gt;

&lt;p&gt;も一つ、設定したカスタムドメインを検証したいときの流れが明確じゃないこと。カスタムドメインを採用するための説明が上述１つ目のURLから記載されているのだが、乗っ取りの危険性ばかり示してある。脅されている。なので、検証から先に行った。検証自体の手順はわかりやすく &lt;strong&gt;githubアカウントのpage カスタムドメイン設定&lt;/strong&gt; では「Verified」を得られて満足だった。githubとDNSサーバー間のcloud同士の設定なのに１分かからなかったと思う。その後に、DNSサーバーへのIP設定を行った。すると、&lt;strong&gt;githubリポジトリのpage カスタムドメイン設定&lt;/strong&gt; ではいつまでも「Verified」にならない。「２４時間かかることがある（これもそこかしこに、この記述がある。脅されている）」と示されているので１日待ったが「Verified」に変わることはなかった。薄々順番のせいだと思っていたので、アカウント側の設定とDNSサーバーのエントリを消去し、やり直したら、これまた、１分ほどで「Verified」を得られた。設定の順番を記述しておいてほしいものだ。&lt;/p&gt;

&lt;p&gt;間抜けに合わせて極めて詳細に、とは言わない。が、ヒントを交えつつ十分には書けると思う。書くように心がけねば。&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/github/2023/03/20/1-github-custome-domain.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/github/2023/03/20/1-github-custome-domain.html</guid>
        
        
        <category>learning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>css：ランディングページ(旧ポータル)の整備</title>
        <description>&lt;p&gt;ランディングページの整備、諸々を書き連ねる&lt;/p&gt;

&lt;h4 id=&quot;portfolioモーダル&quot;&gt;&lt;strong&gt;portfolioモーダル&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;箇条書きが２〜３行ほどであればさほど気にならないが、文章にすると気になる。モーダルの文章が中央揃えされると読みにくい。&lt;/p&gt;

&lt;p&gt;これを、左詰めに変更した。&lt;/p&gt;

&lt;p&gt;_sass/_portal-mod.scss を追加した。以降はこの.scssファイルにcssの変更は集中させるつもりだ。&lt;/p&gt;

&lt;p&gt;.portfolio-modal .modal-content p text-align を left にした。このままだとモーダルのサブタイトルも左揃えになりカッコが悪い。p.item-introはcenterとした。&lt;/p&gt;

&lt;h4 id=&quot;再びscss問題&quot;&gt;&lt;strong&gt;再びscss問題&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;過去の&lt;a href=&quot;/learning/jekyll-scss/2021/11/22/portal-resume-style.html&quot;&gt;履歴のスタイル…&lt;/a&gt;の css/_sass(ディレクトリ)/scss の記述は色々舌足らずなようだ。２年ぶりの試行錯誤の上、想定通りになったのでまとめておこう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;jekyllソースルート&amp;gt;/css/main.scss&lt;/p&gt;

    &lt;p&gt;jekyll-agencyインストールでデフォルトで作成される.scss。_sass配下の.scssを_site/css配下の.cssにコンパイルすることを示す。&lt;/p&gt;

    &lt;p&gt;portalディレクトリに移設の際に意図的に削除したのか、真偽は判らないが、不在なのでblogからディレクトリごとコピーした&lt;/p&gt;

    &lt;p&gt;想定外の挙動はこのファイルの不在だった&lt;/p&gt;

    &lt;p&gt;過去の記事では、これを resume.scss に名前変更し、変更点をそのまま resume.scss に記載したようだ&lt;/p&gt;

    &lt;p&gt;.scssで記述できるのは、_sass配下のみのようだ、agencyの仕様と思う&lt;/p&gt;

    &lt;p&gt;ファイル末尾の@import文に’,’区切りで_sass配下に追加する.scssを拡張子無しで追加する&lt;/p&gt;

    &lt;p&gt;今回の追加はportal-modとした&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;jekyllソースルート&amp;gt;/_sass/_portal-mod.scss&lt;/p&gt;

    &lt;p&gt;ファイル名には’_‘を接頭する&lt;/p&gt;

    &lt;p&gt;目当ての変更を一般的なscssで記述する&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;lt;jekyllソースルート&amp;gt;/_include/head.html&lt;/p&gt;

    &lt;p&gt;main.scssを元に生成されるmain.cssをlinkタグで指すようにする&lt;/p&gt;

    &lt;p&gt;必須な修正&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;main.scssの存在が過去記事で触れられてはいるのだが、我ながら分かりづらい。resume.scssに変更したとか、resume.scss(main.scss)の目的とかが書かれていれば見過ごさなかったのかもしれない。&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll/scss/2023/03/15/9-style-mod.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll/scss/2023/03/15/9-style-mod.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll</category>
        
        <category>scss</category>
        
      </item>
    
      <item>
        <title>ランディングページ(旧ポータル)の整備</title>
        <description>&lt;p&gt;呼称をポータルからランディングページに変えた。その他、諸々整備したことを書き連ねる&lt;/p&gt;

&lt;h4 id=&quot;水平並び複数アイテムの自動中央寄せ&quot;&gt;&lt;strong&gt;水平並び複数アイテムの自動中央寄せ&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;teamセクション(タイトルAuthor)には複数人分のプロファイルを並べることができるが３人に固定されていた。sitetext.ymlのteam.peopleで一人文の表示にすることは可能だが左寄りになってしまっていた。&lt;/p&gt;

&lt;p&gt;同じように、servicesセクションも3サービスに固定でsitetext.ymlのservices.listの項目を減らすと左寄りになってしまう。&lt;/p&gt;

&lt;p&gt;htmlテンプレートを読むとそれぞれ、col-sm-4、col-md-4、となっていた。bootstrapのGridクラスで、水平方向に 4/12 の幅にするクラスだ。この 4 の部分をそれぞれのエントリ数に対応した数にすれば良い。&lt;/p&gt;

&lt;p&gt;servicesセクションの変更を例示する。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% assign service_col_ratio = 12 | divided_by: site.data.sitetext[site.locale].services.list.size %}
:
{% for ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-md-{{ service_col_ratio }}&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Liquidのオブジェクト(表示対象のこと{{}}の部分)、変数タグ({% assing … %})、divided_byフィルタ(オブジェクトかタグで | で接続する)、で実装した。&lt;/p&gt;

&lt;p&gt;冒頭の{% assign…で変数service_col_ratioを宣言かつ 12 / services.list.size で初期化。 ‘/’と表現した部分は | devided_by: に置き換える。この変数をservice_col_ratioをdivタグのクラスcol-md-{{ service_col_ratio }}と表してservices.listのエントリ数を反映させた。&lt;/p&gt;

&lt;p&gt;Liquidは他のテンプレートエンジンと異なり、一般的な算術演算子を組み込まずに一貫してフィルターで計算するポリシーだ。慣れれば構わないのだが、敷居が高い。&lt;/p&gt;

&lt;h4 id=&quot;portfolioのサムネール画像&quot;&gt;&lt;strong&gt;portfolioのサムネール画像&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;portfolioセクションのサムネール画像と、クリックして現れるportfolio_modal内の画像のサイズが固定されている。それぞれ、400x300と &lt;width&gt;x875、だ。サムネールは幅も高さも左の値に固定で、portfolio_modal内画像は高さを875が必須だ。レイアウトが崩れる。&lt;/width&gt;&lt;/p&gt;

&lt;p&gt;不可解な箇所もある。_portfolioディレクトリ下portfolio_modal中文章.mdファイルのthumbnail、ここにはサムネイル画像を与えるのだが、ランディングページ上で当該portfolioグリッドの画像で利用されるのは、同ファイル中のimageに与えた画像だ。無用と判断してエントリを取り除くと、当該portfolioグリッドの画像がなくなる。試しに、imageで与えた画像をthumbnailに与えると当該portfolioグリッドのサイズが崩れる。thubmail画像のサイズだけが利用さているかのような挙動だ。あまり深追いしないことにした。&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll/2023/03/14/9-landing-page-service.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll/2023/03/14/9-landing-page-service.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>favicon対応</title>
        <description>&lt;p&gt;faviconがなくてlocalhostサーバー起動でエラーを蛍光されていた。以前に作ったやること一覧にあった。&lt;/p&gt;

&lt;h4 id=&quot;github-pageかjekyllか&quot;&gt;&lt;strong&gt;github-pageかjekyllか&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;どちらの作法を踏襲すべきか迷った。github-pageを利用しているので、こちらから調べたが腑に落ちる説明は見当たらなかった。探そうと追求せずに、jekyllを調べたらすぐにヒットした。んー、検索で答えが得られると早いな。ボトムアップに調べることをしないから知識はつかないか・・・調べている亜ヂダに疲れたり、何を調べているか見失ったりするから、このやり方は考えものなのかもしれない。でも、手探りするのもいいのだが。&lt;/p&gt;

&lt;p&gt;_include/head.htmlにhtmlのhead節の記述がある。ここにrel=”icon”のlinkタグを追加する。srcにfaviocn.icoへのパスを記述する。だけだ。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/css/main.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canonical&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cat73220.github.io/learning/jekyll/2023/03/12/Z-favicon.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alternate&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/rss+xml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jumly integration&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cat73220.github.io/feed.xml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cat73220.github.io/favicon.ico&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;四行目が追加した行。jekyllの作法で prepend でbaseurlやsite.urlで修飾してやれば、FQ-URL になって確実に favicon.ico がアクセスされる。&lt;/p&gt;

&lt;h4 id=&quot;faviconiconでエラーがなくなった&quot;&gt;&lt;strong&gt;favicon.iconでエラーがなくなった&lt;/strong&gt;&lt;/h4&gt;
</description>
        <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll/2023/03/12/Z-favicon.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll/2023/03/12/Z-favicon.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>GITHUBの警告メールを解決してみよう</title>
        <description>&lt;p&gt;いつの頃からかGithubからセキュリティや依存関係に関する警告メールが届くようになった。調べてみて一番古い警告が 2021年7月14日だ。&lt;/p&gt;

&lt;h4 id=&quot;a-security-advisoryの件&quot;&gt;&lt;strong&gt;A security advisory…の件&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;件名が自分のgithubアカウント名で始まって、続いて「A security advisory…」が、その警告メールだ。&lt;/p&gt;

&lt;p&gt;メールはhtmlで表されていて、可愛らしいアイコンと警告内容の概略と、その詳細を記述したwebページに移動するボタンがその内容だ。デザイナーが監修してくれるとメール本文もお洒落だ。&lt;/p&gt;

&lt;p&gt;最初のセキュリティ警告の概要は「Regular Expression Denial of Service in Addressable templates」だ。REGXPでDOSが可能らしい。すごい隙間を見つける人がいるな、世の中には。&lt;/p&gt;

&lt;p&gt;詳細ボタンでgithubの詳細解説ページを読むと、RubyGemsのaddressableのバージョン 2.3.0 - 2.7.0 を利用していると、REGXP-DOS の危険性があるというものだ。&lt;/p&gt;

&lt;p&gt;今日(2023年3月12日)まで、セキュリティ警告を６件受け取っていた。&lt;/p&gt;

&lt;p&gt;古い順に&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;addressable：2021-7-14&lt;/li&gt;
  &lt;li&gt;commonmarker：2022-3-4&lt;/li&gt;
  &lt;li&gt;tzinfo：2022-7-22&lt;/li&gt;
  &lt;li&gt;@xmldom/xmldom：2022-11-3&lt;/li&gt;
  &lt;li&gt;json5：2023-1-10&lt;/li&gt;
  &lt;li&gt;ua-parser-js：2023-1-28&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全部異なる警告だ。過去の警告は重ねて警告しないようになっているのだろうか。&lt;/p&gt;

&lt;h4 id=&quot;github-your-dependabot-alertsの件&quot;&gt;&lt;strong&gt;[GitHub] Your Dependabot alerts…の件&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;このように始まる警告メールの内容もhtmlで表されていてデザインも監修されている。内容はやはりセキュリティの危険性の警告で、利用中パッケージの名前と共に現在のバージョンと更新すべきバージョン、Githubで管理しているセキュリティ危険性の管理番号まで記されている。利用中のパッケージということで、危険なパッケージに依存している、という警告だ。先の「A security advisory…」との違いは、件名に、いつからいつまでに見つかった、とGithubが脆弱性を発見した期間が明記してあるところだろうか。先の「A security advisory…」は、何をきっかけに発見したのだろうか。ブログをコミットした日時とは合わない。Githubのセキュリティ危険性管理で世間の脆弱性を登録したときかもしれない。&lt;/p&gt;

&lt;p&gt;詳細ボタンでgithubの詳細解説ページを読むと、利用中パッケージのリストで、一行にどこでどのような脆弱性かが一覧されている。全て expos/yarn.lock だった。最古のこの警告メールが2022年3月1日で、この頃にexpoを試したのを覚えている。&lt;/p&gt;

&lt;h4 id=&quot;cat73220hw-your-repository-has-dependenciesの件&quot;&gt;&lt;strong&gt;[cat73220/HW] Your repository has dependencies…の件&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;これは、３通だけ届いている。最後のが今日(2023年3月12日)受け取ったメールだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2021-10-30&lt;/li&gt;
  &lt;li&gt;2022-4-6&lt;/li&gt;
  &lt;li&gt;2023-3-12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全て、githubにpushした日だと思う。今日のは確実にそうだ。&lt;/p&gt;

&lt;p&gt;セキュリティ脆弱性について、あらゆるタイミングで報告していてくれたのだな。オープンソースのセキリティ脆弱性がここまで徹底して解析されて、世間に行き渡っているのが実感できる。安心を勝ち取る、ということだね。&lt;/p&gt;

&lt;h4 id=&quot;解決&quot;&gt;&lt;strong&gt;解決&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;expoに関係する脆弱性は「yarn upgrade –emoji true」で解決だ。冒頭の「A security advisory…」の６件はjekyllに関するもので「bundle update」で解決した。&lt;/p&gt;

&lt;p&gt;githubにデプロイしても「[cat73220/HW] Your repository has dependencies…」警告メールは受信しなかった。&lt;/p&gt;

&lt;h4 id=&quot;gitubactionsdeployymlの実行で警告&quot;&gt;&lt;strong&gt;gitub/actions/deploy.ymlの実行で警告&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;注意が必要だったのはこの警告だ。メールで警告されたりはしない。actionsの実行が完了した時点で、そのページで警告された。「node12はもうじき利用不可能になるから、node16に換えるように」というものだ。&lt;/p&gt;

&lt;p&gt;警告されていることはわかるのだが、見に覚えがないので当惑する。githubは警告の文が明確で親切だ。そのページの警告にどこのなにを参考にすればよいかまで記載されている。actionsの開発者向けと利用者向けに対応が別れていた。親切だ。actionsのymlを記述しているので開発者だと思い、文章を追うのだが意味をなさない。あれこれ考えたが、どうも直面してる警告からかけ離れている、違う、と頭の中で違和感を感じる。こおいうときはもう一方も念のためにみてみるべきだ。利用者側の文章に答えはあった。自分は利用者だったのだな。確かにactionsの機能を &lt;strong&gt;利用&lt;/strong&gt; している。「actions/checkout@v2」を「actions/checkout@v3」に変更してデプロイすると警告が現れなくなった。&lt;/p&gt;

&lt;h4 id=&quot;githubのセキュリティ脆弱性がなくなった&quot;&gt;&lt;strong&gt;githubのセキュリティ脆弱性がなくなった。&lt;/strong&gt;&lt;/h4&gt;
</description>
        <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/github/2023/03/12/Y-supress-github-warnings.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/github/2023/03/12/Y-supress-github-warnings.html</guid>
        
        
        <category>learning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>【備忘録】jekyllでページを追加する</title>
        <description>&lt;p&gt;１年ぶりである・・・忙しさを理由にできるし、興味の対象が変わったのも事実だし、後付の説明は幾らでもできるので、このあたりにしておこう。&lt;/p&gt;

&lt;h4 id=&quot;ページを追加したくなった&quot;&gt;&lt;strong&gt;ページを追加したくなった&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;jekyll-agencyテーマを利用しているが、これが通常のjekyllの作法から大幅に外れた作りとなっている。これの作者はランディングページ作成用に、この方法が合っていると判断したのだろう。jekyll-agencyのポリシーを読み取ろうとしてみたが旨く行かなかったので、jekyllの基本に返ってみることにした。&lt;/p&gt;

&lt;p&gt;曰く「ページはコンテンツを構成する最も基本的なブロックです。スタンドアローンのコンテンツの為にあります。日付に基づかないコンテンツ、またはスタッフ紹介やレシピなどのグループコンテンツでないものです」&lt;/p&gt;

&lt;p&gt;追加したページは一つ以上のページを束ねたもの、で、これを一人以上のスタッフの紹介を束ねた「スタッフ紹介」に似ている捉えると「スタッフ紹介」に近いかもしれない。&lt;/p&gt;

&lt;p&gt;その構成として、はじめに一覧ページを設けて、その一覧中の一つをクリックするとそのページに移動する。この「はじめの一覧ページ」をjekyllの「ページ」にしてみようと考えている。クリックされて移動する先は数あるが「グループコンテンツ」とは捉えないことにする。&lt;/p&gt;

&lt;p&gt;改めて &lt;a href=&quot;https://jekyllrb.com/docs/pages/&quot;&gt;Pages&lt;/a&gt; を読み返してみた。&lt;/p&gt;

&lt;p&gt;「複数のページを整理するためにディレクトリを設けるとよい」とある。追加しようとしたページのディレクトリは既に存在していて、その中にはクリック先のページがマークダウンファイルでディレクトリ構造を持って整理されていた。&lt;/p&gt;

&lt;p&gt;１年前に既に思ったように作業したのだった。忘れていただけである。解説にある通りURLを入力すると、今日思った通りの一覧が現れた。&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll/2023/03/12/X-how-to-add-a-jekyll-page.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll/2023/03/12/X-how-to-add-a-jekyll-page.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>【備忘録】bundler/jekyllコマンドとgit actions</title>
        <description>&lt;p&gt;３ヶ月経つと何もかも忘れている…困ったものだ…効果的にメモを付けておかないと思い出すのも一苦労である。
以下、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HW&lt;/code&gt;githubプロジェクトディレクトリで実行するコマンドである。&lt;/p&gt;

&lt;h4 id=&quot;bundler-と-jekyll-コマンド&quot;&gt;&lt;strong&gt;Bundler と Jekyll コマンド&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundler &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll s &lt;span class=&quot;nt&quot;&gt;-wI&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; blog &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; blog/_site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundler exec&lt;/code&gt; は jekyll を起動する際の常套句で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundlerでjekyllを実行する&lt;/code&gt;ということはすぐに分かる。
続く&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll s&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serve&lt;/code&gt;の略で、ローカルホスト&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;でWebブラウザを待機するということ。
続く&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-wI&lt;/code&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt;モードと&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incremental&lt;/code&gt;モードの略で、それぞれ、「ソースコードの変更を監視してサイトの更新を行う」と「逐次、サイトの更新を行う」である。
最後の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s blog -d blog/_site&lt;/code&gt;は、それぞれ、「ソースコードのソースディレクトリ」と「ビルドしたサイトの保存先ディレクトリ」を指している。
このコマンドを実行したままで、別にコンソールを起動して&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundler &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll b &lt;span class=&quot;nt&quot;&gt;-wI&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; portal &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; blog/_site/portal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行するとローカルで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000/portal/&lt;/code&gt;のアクセスが可能になる。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll b&lt;/code&gt;だけ上↑のWebブラウザ待機と異なっていて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog/_site/portal&lt;/code&gt;ディレクトリに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portal&lt;/code&gt;を出力するだけ、つまり、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;はサイトの「生成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt;」ということ。&lt;/p&gt;

&lt;h4 id=&quot;ブログの投稿&quot;&gt;&lt;strong&gt;ブログの投稿&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;blog/_postの他のファイルに倣って.mdファイルを同ディレクトリに作成すればよい。上↑の準備が整っていればローカルホストで即座に結果を確認できる。&lt;/p&gt;

&lt;h4 id=&quot;git-actions&quot;&gt;&lt;strong&gt;git actions&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行することで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat73220.github.io&lt;/code&gt;サイトは自動的に最新の状態となる。git actionsの導入でgithub内でblogもportalも自動的にビルド＆デプロイされる。
簡単にはlazygitでpushでよい。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/cat73220/HW/actions&lt;/code&gt;でビルドの経過を細かに追跡できる。&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll/2022/04/03/reminder-how-to-use-bunder-and-jekyll.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll/2022/04/03/reminder-how-to-use-bunder-and-jekyll.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>再考、履歴改スキルセット</title>
        <description>&lt;p&gt;&lt;a href=&quot;/portfolio/2022/01/08/service-record.html&quot;&gt;履歴改業務歴&lt;/a&gt;で「スキルベースの判りやすい…マネージャークラスの人が見て…」が、「スキルセット」の目指すところ。&lt;/p&gt;

&lt;p&gt;何を伝えたいか？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;提供できるスキル&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;それらのスキルでできること&lt;/p&gt;

    &lt;p&gt;経験上（思い込みかもしれないが）、多くの人たちは私が示す「スキル」を見ても、それで何ができるのか想像できない。たとえ、作業風景や作業内容を直に見せたとしても、何が起きてるのか、何が起きたのか、どちらも分からないのだ。分からない、伝わらない、を前提に作っておけば、分かってもらえる、伝わる、可能性が高くなるか…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;「できること」は「事業」とか「改善案」とかの形がわかりやすいのでは？と思う&lt;/p&gt;

    &lt;p&gt;「できること」を専門用語で示しても、上述の繰り返しとなり伝わらない&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ボトムダウンの専門用語から説明を始めるより、具体的ではあるがより「世間的な」表現の説明が良いのだとおもう&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;就活で示す「スキルセット」 は専門用語寄りでいいか&lt;/p&gt;

    &lt;p&gt;就活用「スキルセット」と、世間に伝えたい「自分のしたいこと／できること」は分けて示した方がいいか&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;業務歴を元に、就活用「スキルセット」と世間宛「自分のしたいこと／できること」の２つを作る&lt;/strong&gt;…かな&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;就活はこの先あまり積極的にやりたいと思わない…お金を稼ぐのではなく「自給」に切り替える&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;「自給」方法の一つとして自分のスキルを役立てたいので、世間宛の自分のしたいこと／できること、を作る…かな&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/portfolio/2022/01/09/rethink-about-resume.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/portfolio/2022/01/09/rethink-about-resume.html</guid>
        
        
        <category>portfolio</category>
        
      </item>
    
  </channel>
</rss>
