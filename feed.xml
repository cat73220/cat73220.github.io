<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jumly integration</title>
    <description>Attempting jumly.js integration into jekyll.
</description>
    <link>https://cat73220.github.io/</link>
    <atom:link href="https://cat73220.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 20 Nov 2021 03:23:57 +0000</pubDate>
    <lastBuildDate>Sat, 20 Nov 2021 03:23:57 +0000</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>ポータルの文章</title>
        <description>&lt;p&gt;ポータルに載せる文章を考えてみよう…取り掛かってみたら、直ぐに文章は浮かんでこず…方針を立てることにした。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/sitetext.yml&lt;/code&gt;の対応セクションを順に書き込んでいく。&lt;/p&gt;

&lt;p&gt;尚、このファイル&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data&lt;/code&gt;ディレクトリ配下のためか&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yml&lt;/code&gt;のため(こっちだな：設定ファイルだからだ)か、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--incremental --watch&lt;/code&gt;で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;を動作させても、自動ビルドされない。都度、コマンドラインでビルドすることにする。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;header.title &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Welcome to our Studio!&lt;/code&gt;→&lt;/li&gt;
  &lt;li&gt;header.text &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;It's nice to meet you&lt;/code&gt;→&lt;/li&gt;
  &lt;li&gt;header.button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tell me more&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;link先は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Services&lt;/code&gt;セクション→このままでいいな。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Services&lt;/code&gt;セクションに導く文章にしよう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.title &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Services&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;興味を持ってくれた人（クライアント…だけど、この言葉はあまり好きじゃないな）に、提供できるスキル…知識…とか、そお言う言葉だな&lt;/li&gt;
      &lt;li&gt;「クライアント」は「お客様」だよな…つまり &lt;strong&gt;必ず&lt;/strong&gt; お金のやり取りが生じると思うのだが… 受け取る対価はお金だけじゃないことを伝えたいな&lt;/li&gt;
      &lt;li&gt;日本語の他の言葉より&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;サービス&lt;/code&gt;の方が伝わりやすいのか…&lt;/li&gt;
      &lt;li&gt;大半の日本人の「サービス」の意味するところは「無料でXXを受けられる」と解釈することが多いような気がする…&lt;/li&gt;
      &lt;li&gt;対価はいただきたいので「サービス」は使いたくないかも&lt;/li&gt;
      &lt;li&gt;このセクションに、それらを並べるので、並べてから「題」を付けるのがいいかな…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.text &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lorem ipsum&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;上述の通り、ごちゃごちゃ考えたことを纏めた文章かな&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.list[0].&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;E-Commerce&lt;/code&gt;→ワンストップ試作
    &lt;ul&gt;
      &lt;li&gt;WebサービスもIoT装置も、左両方を組み合わせても、全てカバーします…みたいな&lt;/li&gt;
      &lt;li&gt;フルスタックを試作…かな&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.list[1].&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Responsive Design&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;「E-Commerce」も「Responsive Design」も具体的な気もするけど「フルスタック試作」とかよりは抽象的か…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.list[2].&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Markdown(へのリンク)&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;これは技術語だな…あまり気にしなくていいかも&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.list[*].icon&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fa fa-xxx&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;Fontawesomeで対応する言葉を探すのもありだね&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容を考えていくのはこのまま続ければいいけど何時までも文章が決まらないな…　トップダウンだと具体的なものにし辛いか…　ゴールが遠く感じるのは作業を続けられなくなるので避けねば。&lt;/p&gt;

&lt;h4 id=&quot;具体的に挙げられるスキルを並べてみるか&quot;&gt;具体的に挙げられるスキルを並べてみるか…&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;職歴からボトムアップに整えたほうが具体性を保てるな…
    &lt;ul&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;社名&lt;/strong&gt;&lt;/th&gt;
              &lt;th&gt; &lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;トライテック&lt;/td&gt;
              &lt;td&gt;組み込み&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;コンピュータークリエーターズ&lt;/td&gt;
              &lt;td&gt;基礎研究・保守・3DCG&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;ネメシス&lt;/td&gt;
              &lt;td&gt;Unixアプリケーション・3DCG&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;eValley&lt;/td&gt;
              &lt;td&gt;携帯電話 OS・スマフォ ソフトウェア全般&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;エスマテックエンジニアリング&lt;/td&gt;
              &lt;td&gt;携帯電話 OS・スマフォ ソフトウェア全般&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;eFlow&lt;/td&gt;
              &lt;td&gt;携帯電話 OS・スマフォ ソフトウェア全般&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;aLab&lt;/td&gt;
              &lt;td&gt;組み込み&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;esp8266&lt;/td&gt;
              &lt;td&gt;IoT&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;Adafruits&lt;/td&gt;
              &lt;td&gt;Unixデバイスドライバ&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;スペナビ&lt;/td&gt;
              &lt;td&gt;Webシステム&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;Linero&lt;/td&gt;
              &lt;td&gt;Unixデバイスドライバ&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;Plus-C&lt;/td&gt;
              &lt;td&gt;Webシステム&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;Delarco&lt;/td&gt;
              &lt;td&gt;組み込み&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;ImageMill&lt;/td&gt;
              &lt;td&gt;Webシステム&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;bizplace&lt;/td&gt;
              &lt;td&gt;Webシステム&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: right&quot;&gt;3D着せ替え&lt;/td&gt;
              &lt;td&gt;Webシステム・3DCG&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;トライテック、コンピュータークリエーターズ、ネメシス、eValley、エスマテックエンジニアリング、eFlow、aLab、esp8266、Adafruits、スペナビ、Linero、Plus-C、Delarco、ImageMill、bizplace、3D着せ替え&lt;/li&gt;
      &lt;li&gt;これらの&lt;strong&gt;担当作業&lt;/strong&gt;と、 &lt;strong&gt;コンピュータースキル&lt;/strong&gt;にブレークダウンする&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;担当作業&lt;/strong&gt;から、提供可能サービスを概略出来るかな…方向性を幾つかに絞れば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serices.list[*].title&lt;/code&gt;にできそうだ&lt;/li&gt;
      &lt;li&gt;ここで整理したことはそのまま、portfolioやresumeに出来るな…というか、resume→portfolioの順に作ればいいね&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;resumeportfolioの順につくろう&quot;&gt;resume→portfolioの順につくろう&lt;/h4&gt;
</description>
        <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/remind/mymind/2021/11/20/portal-senteces.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/remind/mymind/2021/11/20/portal-senteces.html</guid>
        
        
        <category>remind</category>
        
        <category>mymind</category>
        
      </item>
    
      <item>
        <title>ポータルとポートフォリオの見通し</title>
        <description>&lt;p&gt;git push→github.ioデプロイ の自動化が済んだ。以前よりも使い心地が良くなったので、気軽に、このWebサイトを全体的に再構成しよう。&lt;/p&gt;

&lt;p&gt;サイトタイトルの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jumly integration&lt;/code&gt;は…はて、なんだったんだろ〜…この辺りから整理・整頓していこう。&lt;/p&gt;

&lt;h3 id=&quot;タイトルjumly-integrationを思い出す&quot;&gt;タイトル「Jumly integration」を思い出す&lt;/h3&gt;

&lt;p&gt;思い出した&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UMLダイアグラムを埋め込むjavascriptライブラリだった&lt;/li&gt;
  &lt;li&gt;mermaid 採用の前に jumly.js を見つけて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include/head.html&lt;/code&gt; に直に記述して利用してたのだ&lt;/li&gt;
  &lt;li&gt;配布元の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jumly.tmtk.net&lt;/code&gt;が閉鎖されたのと、これに必要な&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coffee-script.js&lt;/code&gt;へのURLが変更？閉鎖？されたことで使えなくなったのだな&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jumly.tmtk.net&lt;/code&gt;でGooglingしたら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog.tmtk.net&lt;/code&gt;に作者を見つけた。2013年くらいまではJumlyをメンテしてたけど、その後、一切触れなくなった。やめちゃったかな…Twitter@tmtk75で尋ねてみようか…&lt;/li&gt;
  &lt;li&gt;タイトルを変更しよう→考える&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;githubioの構成&quot;&gt;github.ioの構成&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;github.io&lt;/strong&gt;：root：ここは現portalとする
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;blog&lt;/strong&gt;：ここに今のルートを配置&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;portfolio&lt;/strong&gt;：ポートフォリオ:blogリポジトリからportalリポジトリに引っ越しだ
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;resume&lt;/strong&gt;：現resumeを配置。最近のものもここに追加：これも引っ越し&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;portfolioの整理&quot;&gt;portfolioの整理&lt;/h3&gt;

&lt;p&gt;portalのportfolioに合わせて整理しよう&lt;/p&gt;

&lt;p&gt;_portfolioディレクトリに一件ごとのマークダウンファイルを作成…多いな&lt;/p&gt;

&lt;p&gt;ポータルに並ぶポートフォリオを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/portfolio_grid.html&lt;/code&gt;で選んで表示されるようにする&lt;/p&gt;

&lt;p&gt;どこかに全ポートフォリオをアクセスできるように、一覧ページを作る、かな&lt;/p&gt;

&lt;h3 id=&quot;雑多なこと&quot;&gt;雑多なこと&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;favicon.ico&lt;/code&gt;が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not found&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;portal用にフォントを選ぶか&lt;/li&gt;
  &lt;li&gt;フッターや水平段組みした時、偶数個、奇数個、でセンタリングするようにしたい&lt;/li&gt;
  &lt;li&gt;kramdownの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline code&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code block&lt;/code&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;highlight&lt;/code&gt;タグのほうが良いか？ → 使い分ける…highlightを常用するようにしたほうがいいかな
    &lt;ul&gt;
      &lt;li&gt;highlightの書式指定サフィックス&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ruby, html, etc}&lt;/code&gt;がどれくらい揃っているか、に依るか&lt;/li&gt;
      &lt;li&gt;…違った
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code block&lt;/code&gt;記述は htmlを直書きしたとき 途中で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code block&lt;/code&gt;にできない&lt;/li&gt;
          &lt;li&gt;highlightはhtml直書き中でも code block にできる&lt;/li&gt;
          &lt;li&gt;書式指定は何方も同じものが使えて、同じ様に色付けされる←気にしないでいいね&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/remind/mymind/2021/11/13/resolution-for-portal-and-portfolios.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/remind/mymind/2021/11/13/resolution-for-portal-and-portfolios.html</guid>
        
        
        <category>remind</category>
        
        <category>mymind</category>
        
      </item>
    
      <item>
        <title>Github actions 完了</title>
        <description>&lt;h3 id=&quot;エディタの構文検証機能は大事だ&quot;&gt;エディタの構文検証機能は大事だ&lt;/h3&gt;

&lt;p&gt;gitコマンド実行でssh通信にシークレットを渡すシェルスクリプトには直ぐに行きあたれたのだが、いざ、Github Actionsで実行するとエラーが生じる。&lt;/p&gt;

&lt;p&gt;手元で実行しても問題ないが、Github Actionsは追加した行で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invalid workflow file&lt;/code&gt;をエラーを起こす… yamlファイル構文でインデント文字の統一 に気がつくのに思いの外時間を費やしてしまった。&lt;/p&gt;

&lt;p&gt;エディタで意識せずにタブキーを使っていたのと構文検証機能を yamlファイル に設定していなかったため、気にも停めていなかったことだった。追加の２行のインデントがタブ文字だったため、Github Actionsでエラーとなっていた（泣）。&lt;/p&gt;

&lt;h3 id=&quot;ssh--i-の与え方など&quot;&gt;ssh -i の与え方など&lt;/h3&gt;

&lt;p&gt;どの git サブコマンド が ssh通信するのか、よく調べていないのと、git -cをgitコマンド毎に記述するのは可読性が落ちることとが大きな理由で、デプロイ(commit/push)のステップでは環境変数(GIT_SSH_COMMAND)にした。&lt;/p&gt;

&lt;p&gt;手元でローカルに clone するのと少し違っているみたいで、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remote.origin.url&lt;/code&gt; が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/config&lt;/code&gt; に記録されなかった。 …まだ、調べたりないな… 毎回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config retmote...&lt;/code&gt; を実行するようにした。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull/push&lt;/code&gt; のタイミングと &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; の仕方に手を入れたら、最後まで通るようになった。&lt;/p&gt;

&lt;p&gt;このポストが、公開ページで見られたら、一応、完成ってことだな。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt; 完成したよ！&lt;/p&gt;

</description>
        <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/github/2021/11/12/github-action-succeeded.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/github/2021/11/12/github-action-succeeded.html</guid>
        
        
        <category>learning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>Github actionsを試めしてみた</title>
        <description>&lt;h3 id=&quot;ほとんどこのガイドの１章目だけでできてしまうのだな&quot;&gt;ほとんど、この&lt;a href=&quot;https://docs.github.com/ja/actions/learn-github-actions/understanding-github-actions&quot;&gt;ガイドの１章目&lt;/a&gt;だけで、できてしまうのだな&lt;/h3&gt;

&lt;p&gt;test.ymlを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HW/.github/workflows&lt;/code&gt;に作って、pullした空の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.io&lt;/code&gt;リポジトリGITHUBIOディレクトリに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog&lt;/code&gt;を生成して、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -l&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -laF GITHBUIO&lt;/code&gt;を実行する&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt;アクションを作ってみた。&lt;/p&gt;

&lt;p&gt;pushすると、GithubのHW・Actionsページの左ペーンに、作ったばかりの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt;アクションの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name:&lt;/code&gt;欄が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All workflows&lt;/code&gt;の下に表示された。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All workflows&lt;/code&gt;がデフォルトで、全てのアクションの実行結果がコミットを１単位として行で並ぶ。TestアクションをクリックするとTestアクションの実行結果だけに絞られる。&lt;/p&gt;

&lt;p&gt;実行結果の行をクリックすると、まんまですね。実行結果がアクション図のアクティビティ単位で確認できた。いわゆるデバックプリントが得られた。&lt;/p&gt;

&lt;p&gt;Testアクションの不備、些細なタイポや確認ミス、等を直してコミットし直すと、実行結果行のコミット名左のアイコンが赤バツか緑チェックに変わる。&lt;/p&gt;

&lt;p&gt;lsくらいならさっさとできてしまった。cloneと生成は問題なく実行できた。まんま、Dockerでshellプログラミングしてるのと同じだ。&lt;/p&gt;

&lt;p&gt;あまりのあっけなさに、感動した&lt;/p&gt;

&lt;p&gt;…次に進むために頭を冷やさねば&lt;/p&gt;

&lt;h3 id=&quot;デプロイをしてみる&quot;&gt;デプロイをしてみる&lt;/h3&gt;

&lt;p&gt;頭も冷めないまま、deploy.ymlを作成しpushした。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1 Run &lt;span class=&quot;nv&quot;&gt;SOURCE_COMMIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%an: %B&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_SHA&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
20 remote: Permission to cat73220/cat73220.github.io.git denied to github-actions[bot].
21 fatal: unable to access &lt;span class=&quot;s1&quot;&gt;'https://github.com/cat73220/cat73220.github.io.git/'&lt;/span&gt;: The requested URL returned error: 403
22 Error: Process completed with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 128.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;エラーが出ました。 &lt;strong&gt;github.ioにコミットするための権限がありません&lt;/strong&gt; だそうな。&lt;/p&gt;

&lt;p&gt;さて。&lt;/p&gt;

&lt;p&gt;Googling by 「githubアクション 他のレポジトリにpushするための権限」&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://3nan3.github.io/post/2019122201_github_actions/&quot; target=&quot;_blank&quot;&gt;GitHub Actions で別のリポジトリに git push する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/HeRo/items/935d5e268208d411ab5a&quot; target=&quot;_blank&quot;&gt;Github Actionsの使い方メモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;沢山、ヒットした中から 上２リンク を選択。 …初めから読んでみるか…&lt;/p&gt;

&lt;p&gt;1で当たりっぽい。 tl;dr にしたいことが書いてあるね&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;tldr&quot;&gt;tl;dr&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;push先のレポジトリで、Settingsから Deploy keys （公開鍵）を登録&lt;/li&gt;
    &lt;li&gt;GitHub Actionsを設定するレポジトリで、Settingsの Secrets にDeploy keysに対応するの秘密鍵を登録&lt;/li&gt;
    &lt;li&gt;GitHub Actions用のymlをいい感じに書いてpushする&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;心配してたこともここで解消された。２行目「Actions…Settings…秘密鍵を登録」。これで、大丈夫でしょう。…一応、全部に目を通してみた。&lt;/p&gt;

&lt;p&gt;別リポジトリの権限周りが 想定外に複雑に実装されている。リポジトリ指定に登録した秘密鍵環境変数を渡すだけで良さそうな気が…&lt;/p&gt;

&lt;p&gt;… 環境変数名をリポジトリURLに当てはめるだけじゃダメだった… 環境変数名がシークレットに直接置き換わってリポジトリURLとしてエラーになってしまう。&lt;/p&gt;

&lt;p&gt;1の実装のように、gitを実行する際のsshでシークレットを参照するようにしないと、みたい。&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/github/2021/11/11/testing-github-action.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/github/2021/11/11/testing-github-action.html</guid>
        
        
        <category>learning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>【続き2】git pushをトリガーにGithub actionsでbuildとdeployする</title>
        <description>&lt;h3 id=&quot;先週の不明点&quot;&gt;先週の不明点&lt;/h3&gt;

&lt;p&gt;不明点だった、&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;このスクリプト&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.github/workflow/&amp;lt;..&amp;gt;.yml)&lt;/code&gt;のデバッグの仕方&lt;/li&gt;
  &lt;li&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/li&gt;
  &lt;li&gt;github pagesリポジトリでサブディレクトリで階層が別れていることに対応&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1も判明した。ついでに、2は訂正がある。&lt;/p&gt;

&lt;h4 id=&quot;このスクリプトgithubworkflowymlのデバッグの仕方&quot;&gt;「このスクリプト&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.github/workflow/&amp;lt;..&amp;gt;.yml)&lt;/code&gt;のデバッグの仕方」&lt;/h4&gt;

&lt;p&gt;先週の「次は、&lt;a href=&quot;https://docs.github.com/ja/actions&quot;&gt;ここ&lt;/a&gt;を読まないと」を初めから読むと書いてあった…ドキュメントは初めから読むものなのかねぇ…どーも、後から読んでしまう 😁。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.github.com/ja/actions/learn-github-actions/understanding-github-actions#viewing-the-jobs-activity&quot;&gt;ジョブのアクティビティを表示&lt;/a&gt;…つまり、usesとか、runとか、の動作とその出力を「アクティビティ」として、「アクティビティを表示」と表現してた。 &lt;strong&gt;デバッグ&lt;/strong&gt; なんて言わないんだね。&lt;/p&gt;

&lt;h4 id=&quot;gh-pagesブランチにデプロイとあるが別のgithub-pagesリポジトリにデプロイできないのか&quot;&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/h4&gt;

&lt;p&gt;対象リポジトリのgithub・setting・pagesでgithub-pageの対象にするブランチを決めることが出来る。このブランチを「gh-pagesブランチ」に設定ということであった。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;つまり、必ずgh-pagesブランチ ということではなく、任意である。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Github pages側の取り決めで、「gh-pages」ブランチにpushした内容が &amp;lt;…&amp;gt;.github.io のコンテンツとなる。かな。&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/github/2021/11/11/continued-build-deploy-by-github-action.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/github/2021/11/11/continued-build-deploy-by-github-action.html</guid>
        
        
        <category>learning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>【続き】git pushをトリガーにGithub actionsでbuildとdeployする</title>
        <description>&lt;h3 id=&quot;昨日の不明点&quot;&gt;昨日の不明点&lt;/h3&gt;

&lt;p&gt;不明点だった、&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;このスクリプト&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.github/workflow/&amp;lt;..&amp;gt;.yml)&lt;/code&gt;のデバッグの仕方&lt;/li&gt;
  &lt;li&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/li&gt;
  &lt;li&gt;github pagesリポジトリでサブディレクトリで階層が別れていることに対応&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このうち、2、3が判明した。&lt;/p&gt;

&lt;h4 id=&quot;gh-pagesブランチにデプロイとあるが別のgithub-pagesリポジトリにデプロイできないのか&quot;&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/h4&gt;

&lt;p&gt;対象リポジトリのgithub・setting・pagesでgithub-pageの対象にするブランチを決めることが出来る。このブランチを「gh-pagesブランチ」に設定ということであった。&lt;/p&gt;

&lt;p&gt;つまり、必ずgh-pagesブランチ ということではなく、任意である。&lt;/p&gt;

&lt;h4 id=&quot;github-pagesリポジトリでサブディレクトリで階層が別れていることに対応&quot;&gt;github pagesリポジトリでサブディレクトリで階層が別れていることに対応&lt;/h4&gt;

&lt;p&gt;actionsのyamlスクリプトの run節で可能である。また、uses節で指定するスクリプトの引数に存在すれば可能である。&lt;/p&gt;

&lt;p&gt;actionsで利用するdockerコンテナは おおよそubuntu等 linux系 を選ぶだろう、慣れてるからね。そこに構築する（されている）コマンド群は、手元のコマンド群と似たようなものにするだろう、なので、可能である。&lt;/p&gt;

&lt;h3 id=&quot;新たな課題&quot;&gt;新たな課題&lt;/h3&gt;

&lt;p&gt;ymlスクリプトのデバッグは、printfデバッグの方法を調べるだけなので、課題を纏めてみる。&lt;/p&gt;

&lt;p&gt;したいことは、&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;ローカル&lt;/strong&gt; のソースリポジトリで、成果物を &lt;strong&gt;ローカル&lt;/strong&gt; のgithub.ioリポジトリを生成先に指定して、ビルド&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ローカル&lt;/strong&gt; のgithub.ioリポジトリでgit push&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の２点。&lt;/p&gt;

&lt;p&gt;説明中「 &lt;strong&gt;ローカル&lt;/strong&gt; 」部分が「actions上のdockerコンテナ」に置き換わる。&lt;/p&gt;

&lt;p&gt;「actions上のdockerコンテナ」上には、ソースリポジトリとgithub.ioリポジトリをcloneするのだな。ここまでできればruns節で``bundle exec…`と記述すればよいだろう。&lt;/p&gt;

&lt;p&gt;次に「actions上のdockerコンテナ」上でリモート(github上)のgithub.ioリポジトリにpushするのだな。&lt;/p&gt;

&lt;p&gt;「actions上のdockerコンテナ」にローカルのgit(秘密鍵：~/.sshディレクトリ)+bundlerの環境を作れば出来るのか…&lt;/p&gt;

&lt;p&gt;必要なファイル群を選択してコピーするのか…めんどくさいなぁ&lt;/p&gt;

&lt;p&gt;参考にしているyamlファイルを眺めていると gitコマンドやbundler,jekyll(つまりrubyも) は&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;actions/checkout@2&lt;/li&gt;
  &lt;li&gt;actions/setup-ruby@1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をuses節で指定するだけのようである…それほど面倒くさくないかも&lt;/p&gt;

&lt;p&gt;煮詰まったのでキーワード「github-pages」を纏めてみることにした&lt;/p&gt;

&lt;h4 id=&quot;github-pagesについて&quot;&gt;github-pagesについて&lt;/h4&gt;

&lt;p&gt;このキーワードで２系統&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Githubが提供している「pages」機能&lt;/li&gt;
  &lt;li&gt;Github「pages」機能を便利に使うためのRuby Gemの名称&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;過去に、このGemをインストールしていて、インストールした理由を完全に忘れていて、解釈をごちゃ混ぜにしていた^^;）&lt;/p&gt;

&lt;p&gt;「pages」で想定している運用方法があって、それを Gem github-pages は容易にするように設計されている。&lt;/p&gt;

&lt;p&gt;ここで採ったgithub.ioでは「pages」の設定が存在しているが、これもまた、過去に設定した際の使い方を忘れている。&lt;/p&gt;

&lt;p&gt;実は「pages」を利用しなくて良いのでは… 再度「Github pages」で検索&lt;/p&gt;

&lt;p&gt;Githubの「pages」のドキュメントの冒頭に「GitHub Pages サンプル集」リンクがあって、何の気なしにクリックして、一覧ページに移動。Jekyllをクリックして、やはり、なんとなく&lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/.github/workflows/docs.yml&quot;&gt;「.github/workflows/docs.yml」&lt;/a&gt;と辿ってみると…ズバリの答えが出てきてしまった…自分が採っているgithub.ioと同じ運用方法でdocsを生成している。スクリプトで使ってるコマンドやその実行順序がスンナリと解釈できるの。問題を感じない。&lt;/p&gt;

&lt;p&gt;説明の各所に出てきたCNAMEの使い方はreactのgh-pagesブランチを見たらなんか、判ったかも。って思った。&lt;/p&gt;

&lt;p&gt;次は、&lt;a href=&quot;https://docs.github.com/ja/actions&quot;&gt;ここ&lt;/a&gt;を読まないと&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/github/2021/11/06/continued-build-deploy-by-github-action.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/github/2021/11/06/continued-build-deploy-by-github-action.html</guid>
        
        
        <category>learning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>git pushをトリガーにGithub actionsでbuildとdeployする</title>
        <description>&lt;h3 id=&quot;デプロイまでを自動化&quot;&gt;デプロイまでを自動化&lt;/h3&gt;

&lt;p&gt;makefileとか色々と古風な方法を思いついたのだが、検索すると circle ci/cd とか github actions 等がよくヒットした。勉強のため色々読んでみると、github-actionsでできそうな気配…基本以下のyamlファイルを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflow/&amp;lt;job名&amp;gt;.yml&lt;/code&gt;(job名は下の例で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages-deploy&lt;/code&gt;のこと)で記述して、このリポジトリにgit pushするだけで済むらしい。&lt;/p&gt;

&lt;p&gt;以下のyamlは&lt;a href=&quot;https://blog.toshimaru.net/jekyll-deploy-with-github-actions/&quot;&gt;この記事&lt;/a&gt;から拝借した。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;on:
  push:
    branches:
      - master
&lt;span class=&quot;nb&quot;&gt;jobs&lt;/span&gt;:
  gh-pages-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7
    - name: bundle &lt;span class=&quot;nb&quot;&gt;install
      &lt;/span&gt;run: |
        bundle config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;path &lt;span class=&quot;s1&quot;&gt;'vendor/bundle'&lt;/span&gt;
        bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
    - name: Jekyll Build
      run: bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        personal_token: &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
        publish_dir: ./_site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;不明点は&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;このスクリプトのデバッグの仕方&lt;/li&gt;
  &lt;li&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/li&gt;
  &lt;li&gt;github pagesリポジトリでサブディレクトリで階層が別れていることに対応&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらが明確になれば、導入だな&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/github/2021/11/05/build-deploy-by-github-action.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/github/2021/11/05/build-deploy-by-github-action.html</guid>
        
        
        <category>learning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>github.ioの運用</title>
        <description>&lt;h3 id=&quot;githubioの運用&quot;&gt;github.ioの運用&lt;/h3&gt;

&lt;p&gt;サブディレクトリ型URLで&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;github.io/直
    &lt;ul&gt;
      &lt;li&gt;ポータル&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;github.io/portfolio
    &lt;ul&gt;
      &lt;li&gt;スキル紹介ページ
        &lt;ul&gt;
          &lt;li&gt;組み込みスキルページ&lt;/li&gt;
          &lt;li&gt;Webページ作成スキルページ&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;github.io/blog
    &lt;ul&gt;
      &lt;li&gt;ブログ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の様に構成してみよう。&lt;/p&gt;

&lt;h3 id=&quot;githubioへのデプロイ&quot;&gt;github.ioへのデプロイ&lt;/h3&gt;

&lt;p&gt;現状の手作業&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/&amp;lt;...&amp;gt;/&amp;lt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll b
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/&amp;lt;...&amp;gt;/_site
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;cv - &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; github.io &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; -
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/&amp;lt;...&amp;gt;/github.io/&amp;lt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;*&amp;gt;&lt;/code&gt; を それぞれ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;直下&lt;/li&gt;
  &lt;li&gt;/blog&lt;/li&gt;
  &lt;li&gt;/portfolio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と三通りに分けて手動で実行しているのを&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/&amp;lt;...&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&amp;lt;ビルドコマンド&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&amp;lt;デプロイコマンド&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;の様に、ビルドコマンドとデプロイコマンドの２つに纏めよう。&lt;/p&gt;

&lt;p&gt;現状の手作業は、手順が多すぎで、更新と更新の期間が開くとこの手順を順番ごと全て忘れるため。&lt;/p&gt;

&lt;h3 id=&quot;開発ディレクトリの整理&quot;&gt;開発ディレクトリの整理&lt;/h3&gt;

&lt;p&gt;ビルドコマンドとデプロイコマンドに纏めるために、開発ディレクトリも構成し直そう。&lt;/p&gt;

&lt;p&gt;HW/blog、HW/blog/portfolioとHW/portalを&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HW/portal&lt;/li&gt;
  &lt;li&gt;HW/portfolio&lt;/li&gt;
  &lt;li&gt;HW/blog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にして、既存の blog と portal は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HW/portal-by-2111&lt;/li&gt;
  &lt;li&gt;HW/blog-by-2111&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と名前変更して保持する。&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/githubio/operation/2021/11/04/the-githubio-operation.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/githubio/operation/2021/11/04/the-githubio-operation.html</guid>
        
        
        <category>githubio</category>
        
        <category>operation</category>
        
      </item>
    
      <item>
        <title>Jekyllのサブコマンド</title>
        <description>&lt;h3 id=&quot;jekyllのサブコマンド&quot;&gt;jekyllのサブコマンド&lt;/h3&gt;

&lt;p&gt;サブコマンド s(serve)、b(build) 等に -s(–source)、-d(–destination) オプションを与えられる。&lt;/p&gt;

&lt;h4 id=&quot;-ssourceオプション&quot;&gt;-s(–source)オプション&lt;/h4&gt;

&lt;p&gt;jekyllソースディレクトリの指定。ソースディレクトリとは離れたディレクトリから上述のサブコマンドを実行できる&lt;/p&gt;

&lt;h4 id=&quot;-ddestinationオプション&quot;&gt;-d(–destination)オプション&lt;/h4&gt;

&lt;p&gt;生成先ディレクトリの指定。&lt;a href=&quot;/githubio/operation/2021/11/04/the-githubio-operation.html&quot;&gt;github.ioの運用&lt;/a&gt; で &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;...&amp;gt;github.io&amp;lt;*&amp;gt;&lt;/code&gt; を与えれば、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar cf ...&lt;/code&gt;が省ける&lt;/p&gt;

&lt;h4 id=&quot;実行例&quot;&gt;実行例&lt;/h4&gt;

&lt;p&gt;-sと-dは一緒に使うことが多いでしょう。-sだけで使うと作業ディレクトリに _site ディレクトリが自動生成されてしまう。別に構わないか…&lt;/p&gt;

&lt;p&gt;sサブコマンドであれば&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
blog
..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll s &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; blog &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; blog/_site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;の様にソースディレクトリ内に_siteディレクトリを生成させて、作業ディレクトリを汚染しないようにしたほうが気持ちいいかな。&lt;/p&gt;

&lt;p&gt;bサブコマンドでは&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll b &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; blog &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; ~/&amp;lt;...&amp;gt;githbu.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;の様に github.io 用のローカルレポジトリに生成させて、上述の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar cf ...&lt;/code&gt;を省くために使う。&lt;/p&gt;

&lt;p&gt;何方のオプションもサブコマンドの後に記述しないとならない。jekyllの仕様である。&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll-theme/2021/11/04/jekyll-subcommands.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll-theme/2021/11/04/jekyll-subcommands.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll-theme</category>
        
      </item>
    
      <item>
        <title>テーマの適用</title>
        <description>&lt;h3 id=&quot;jekyllのサイト&quot;&gt;jekyllの「サイト」&lt;/h3&gt;

&lt;p&gt;サイトはWebページのことで、_siteディレクトリに生成される一群のWebページのファイル群のこと&lt;/p&gt;

&lt;p&gt;サイトは、jekyllコマンドをダイレクトに&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new portal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のように実行する。newコマンドのあとの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portal&lt;/code&gt;がサイト名となる&lt;/p&gt;

&lt;p&gt;上の実行ではデフォルトで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;テーマが選ばれる&lt;/p&gt;

&lt;h3 id=&quot;テーマの変更gemfile版&quot;&gt;テーマの変更(Gemfile版)&lt;/h3&gt;

&lt;p&gt;Gemfile の &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;minima&quot;&lt;/code&gt; を &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-agency&lt;/code&gt; に変更&lt;/p&gt;

&lt;p&gt;_config.yml の &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theme: minima&lt;/code&gt; を &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theme: jekyll-agency&lt;/code&gt; に変更&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;portal
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で jekyll-agench をインストールする&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行して&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;をwebブラウザでアクセスすると、jekyll-agencyテーマで home ページが現れる&lt;/p&gt;

&lt;p&gt;この状態ではhomeページは空っぽでなんとも捉えようのない状態である&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll-theme/2021/10/31/jekyll-themes.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll-theme/2021/10/31/jekyll-themes.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll-theme</category>
        
      </item>
    
  </channel>
</rss>
