<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jumly integration</title>
    <description>Attempting jumly.js integration into jekyll.
</description>
    <link>https://cat73220.github.io/</link>
    <atom:link href="https://cat73220.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 Mar 2023 06:34:29 +0000</pubDate>
    <lastBuildDate>Sun, 12 Mar 2023 06:34:29 +0000</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>GITHUBの警告メールを解決してみよう</title>
        <description>&lt;p&gt;いつの頃からかGithubからセキュリティや依存関係に関する警告メールが届くようになった。調べてみて一番古い警告が 2021年7月14日だ。&lt;/p&gt;

&lt;h4 id=&quot;a-security-advisoryの件&quot;&gt;&lt;strong&gt;A security advisory…の件&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;件名が自分のgithubアカウント名で始まって、続いて「A security advisory…」が、その警告メールだ。&lt;/p&gt;

&lt;p&gt;メールはhtmlで表されていて、可愛らしいアイコンと警告内容の概略と、その詳細を記述したwebページに移動するボタンがその内容だ。デザイナーが監修してくれるとメール本文もお洒落だ。&lt;/p&gt;

&lt;p&gt;最初のセキュリティ警告の概要は「Regular Expression Denial of Service in Addressable templates」だ。REGXPでDOSが可能らしい。すごい隙間を見つける人がいるな、世の中には。&lt;/p&gt;

&lt;p&gt;詳細ボタンでgithubの詳細解説ページを読むと、RubyGemsのaddressableのバージョン 2.3.0 - 2.7.0 を利用していると、REGXP-DOS の危険性があるというものだ。&lt;/p&gt;

&lt;p&gt;今日(2023年3月12日)まで、セキュリティ警告を６件受け取っていた。&lt;/p&gt;

&lt;p&gt;古い順に&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;addressable：2021-7-14&lt;/li&gt;
  &lt;li&gt;commonmarker：2022-3-4&lt;/li&gt;
  &lt;li&gt;tzinfo：2022-7-22&lt;/li&gt;
  &lt;li&gt;@xmldom/xmldom：2022-11-3&lt;/li&gt;
  &lt;li&gt;json5：2023-1-10&lt;/li&gt;
  &lt;li&gt;ua-parser-js：2023-1-28&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全部異なる警告だ。過去の警告は重ねて警告しないようになっているのだろうか。&lt;/p&gt;

&lt;h4 id=&quot;github-your-dependabot-alertsの件&quot;&gt;&lt;strong&gt;[GitHub] Your Dependabot alerts…の件&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;このように始まる警告メールの内容もhtmlで表されていてデザインも監修されている。内容はやはりセキュリティの危険性の警告で、利用中パッケージの名前と共に現在のバージョンと更新すべきバージョン、Githubで管理しているセキュリティ危険性の管理番号まで記されている。利用中のパッケージということで、危険なパッケージに依存している、という警告だ。先の「A security advisory…」との違いは、件名に、いつからいつまでに見つかった、とGithubが脆弱性を発見した期間が明記してあるところだろうか。先の「A security advisory…」は、何をきっかけに発見したのだろうか。ブログをコミットした日時とは合わない。Githubのセキュリティ危険性管理で世間の脆弱性を登録したときかもしれない。&lt;/p&gt;

&lt;p&gt;詳細ボタンでgithubの詳細解説ページを読むと、利用中パッケージのリストで、一行にどこでどのような脆弱性かが一覧されている。全て expos/yarn.lock だった。最古のこの警告メールが2022年3月1日で、この頃にexpoを試したのを覚えている。&lt;/p&gt;

&lt;h4 id=&quot;cat73220hw-your-repository-has-dependenciesの件&quot;&gt;&lt;strong&gt;[cat73220/HW] Your repository has dependencies…の件&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;これは、３通だけ届いている。最後のが今日(2023年3月12日)受け取ったメールだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2021-10-30&lt;/li&gt;
  &lt;li&gt;2022-4-6&lt;/li&gt;
  &lt;li&gt;2023-3-12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全て、githubにpushした日だと思う。今日のは確実にそうだ。&lt;/p&gt;

&lt;p&gt;セキュリティ脆弱性について、あらゆるタイミングで報告していてくれたのだな。オープンソースのセキリティ脆弱性がここまで徹底して解析されて、世間に行き渡っているのが実感できる。安心を勝ち取る、ということだね。&lt;/p&gt;

&lt;h4 id=&quot;解決&quot;&gt;&lt;strong&gt;解決&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;expoに関係する脆弱性は「yarn upgrade –emoji true」で解決だ。冒頭の「A security advisory…」の６件はjekyllに関するもので「bundle update」で解決した。&lt;/p&gt;

&lt;p&gt;githubにデプロイしても「[cat73220/HW] Your repository has dependencies…」警告メールは受信しなかった。&lt;/p&gt;

&lt;h4 id=&quot;gitubactionsdeployymlの実行で警告&quot;&gt;&lt;strong&gt;gitub/actions/deploy.ymlの実行で警告&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;注意が必要だったのはこの警告だ。メールで警告されたりはしない。actionsの実行が完了した時点で、そのページで警告された。「node12はもうじき利用不可能になるから、node16に換えるように」というものだ。&lt;/p&gt;

&lt;p&gt;警告されていることはわかるのだが、見に覚えがないので当惑する。githubは警告の文が明確で親切だ。そのページの警告にどこのなにを参考にすればよいかまで記載されている。actionsの開発者向けと利用者向けに対応が別れていた。親切だ。actionsのymlを記述しているので開発者だと思い、文章を追うのだが意味をなさない。あれこれ考えたが、どうも直面してる警告からかけ離れている、違う、と頭の中で違和感を感じる。こおいうときはもう一方も念のためにみてみるべきだ。利用者側の文章に答えはあった。自分は利用者だったのだな。確かにactionsの機能を &lt;strong&gt;利用&lt;/strong&gt; している。「actions/checkout@v2」を「actions/checkout@v3」に変更してデプロイすると警告が現れなくなった。&lt;/p&gt;

&lt;h4 id=&quot;githubのセキュリティ脆弱性がなくなった&quot;&gt;&lt;strong&gt;githubのセキュリティ脆弱性がなくなった。&lt;/strong&gt;&lt;/h4&gt;
</description>
        <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/github/2023/03/12/supress-github-warnings.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/github/2023/03/12/supress-github-warnings.html</guid>
        
        
        <category>learning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>【備忘録】jekyllでページを追加する</title>
        <description>&lt;p&gt;１年ぶりである・・・忙しさを理由にできるし、興味の対象が変わったのも事実だし、後付の説明は幾らでもできるので、このあたりにしておこう。&lt;/p&gt;

&lt;h4 id=&quot;ページを追加したくなった&quot;&gt;&lt;strong&gt;ページを追加したくなった&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;jekyll-agencyテーマを利用しているが、これが通常のjekyllの作法から大幅に外れた作りとなっている。これの作者はランディングページ作成用に、この方法が合っていると判断したのだろう。jekyll-agencyのポリシーを読み取ろうとしてみたが旨く行かなかったので、jekyllの基本に返ってみることにした。&lt;/p&gt;

&lt;p&gt;曰く「ページはコンテンツを構成する最も基本的なブロックです。スタンドアローンのコンテンツの為にあります。日付に基づかないコンテンツ、またはスタッフ紹介やレシピなどのグループコンテンツでないものです」&lt;/p&gt;

&lt;p&gt;追加したページは一つ以上のページを束ねたもの、で、これを一人以上のスタッフの紹介を束ねた「スタッフ紹介」に似ている捉えると「スタッフ紹介」に近いかもしれない。&lt;/p&gt;

&lt;p&gt;その構成として、はじめに一覧ページを設けて、その一覧中の一つをクリックするとそのページに移動する。この「はじめの一覧ページ」をjekyllの「ページ」にしてみようと考えている。クリックされて移動する先は数あるが「グループコンテンツ」とは捉えないことにする。&lt;/p&gt;

&lt;p&gt;改めて &lt;a href=&quot;https://jekyllrb.com/docs/pages/&quot;&gt;Pages&lt;/a&gt; を読み返してみた。&lt;/p&gt;

&lt;p&gt;「複数のページを整理するためにディレクトリを設けるとよい」とある。追加しようとしたページのディレクトリは既に存在していて、その中にはクリック先のページがマークダウンファイルでディレクトリ構造を持って整理されていた。&lt;/p&gt;

&lt;p&gt;１年前に既に思ったように作業したのだった。忘れていただけである。解説にある通りURLを入力すると、今日思った通りの一覧が現れた。&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll/2023/03/12/how-to-add-a-jekyll-page.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll/2023/03/12/how-to-add-a-jekyll-page.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>favicon対応</title>
        <description>&lt;p&gt;faviconがなくてlocalhostサーバー起動でエラーを蛍光されていた。以前に作ったやること一覧にあった。&lt;/p&gt;

&lt;h4 id=&quot;github-pageかjekyllか&quot;&gt;&lt;strong&gt;github-pageかjekyllか&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;どちらの作法を踏襲すべきか迷った。github-pageを利用しているので、こちらから調べたが腑に落ちる説明は見当たらなかった。探そうと追求せずに、jekyllを調べたらすぐにヒットした。んー、検索で答えが得られると早いな。ボトムアップに調べることをしないから知識はつかないか・・・調べている亜ヂダに疲れたり、何を調べているか見失ったりするから、このやり方は考えものなのかもしれない。でも、手探りするのもいいのだが。&lt;/p&gt;

&lt;p&gt;_include/head.htmlにhtmlのhead節の記述がある。ここにrel=”icon”のlinkタグを追加する。srcにfaviocn.icoへのパスを記述する。だけだ。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/css/main.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canonical&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cat73220.github.io/learning/jekyll/2023/03/12/favicon.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alternate&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/rss+xml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jumly integration&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cat73220.github.io/feed.xml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cat73220.github.io/favicon.ico&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;四行目が追加した行。jekyllの作法で prepend でbaseurlやsite.urlで修飾してやれば、FQ-URL になって確実に favicon.ico がアクセスされる。&lt;/p&gt;

&lt;h4 id=&quot;faviconiconでエラーがなくなった&quot;&gt;&lt;strong&gt;favicon.iconでエラーがなくなった&lt;/strong&gt;&lt;/h4&gt;
</description>
        <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll/2023/03/12/favicon.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll/2023/03/12/favicon.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>【備忘録】bundler/jekyllコマンドとgit actions</title>
        <description>&lt;p&gt;３ヶ月経つと何もかも忘れている…困ったものだ…効果的にメモを付けておかないと思い出すのも一苦労である。
以下、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HW&lt;/code&gt;githubプロジェクトディレクトリで実行するコマンドである。&lt;/p&gt;

&lt;h4 id=&quot;bundler-と-jekyll-コマンド&quot;&gt;&lt;strong&gt;Bundler と Jekyll コマンド&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundler &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll s &lt;span class=&quot;nt&quot;&gt;-wI&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; blog &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; blog/_site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundler exec&lt;/code&gt; は jekyll を起動する際の常套句で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundlerでjekyllを実行する&lt;/code&gt;ということはすぐに分かる。
続く&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll s&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serve&lt;/code&gt;の略で、ローカルホスト&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;でWebブラウザを待機するということ。
続く&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-wI&lt;/code&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt;モードと&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incremental&lt;/code&gt;モードの略で、それぞれ、「ソースコードの変更を監視してサイトの更新を行う」と「逐次、サイトの更新を行う」である。
最後の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s blog -d blog/_site&lt;/code&gt;は、それぞれ、「ソースコードのソースディレクトリ」と「ビルドしたサイトの保存先ディレクトリ」を指している。
このコマンドを実行したままで、別にコンソールを起動して&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundler &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll b &lt;span class=&quot;nt&quot;&gt;-wI&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; portal &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; blog/_site/portal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行するとローカルで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000/portal/&lt;/code&gt;のアクセスが可能になる。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll b&lt;/code&gt;だけ上↑のWebブラウザ待機と異なっていて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog/_site/portal&lt;/code&gt;ディレクトリに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portal&lt;/code&gt;を出力するだけ、つまり、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;はサイトの「生成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt;」ということ。&lt;/p&gt;

&lt;h4 id=&quot;ブログの投稿&quot;&gt;&lt;strong&gt;ブログの投稿&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;blog/_postの他のファイルに倣って.mdファイルを同ディレクトリに作成すればよい。上↑の準備が整っていればローカルホストで即座に結果を確認できる。&lt;/p&gt;

&lt;h4 id=&quot;git-actions&quot;&gt;&lt;strong&gt;git actions&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行することで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat73220.github.io&lt;/code&gt;サイトは自動的に最新の状態となる。git actionsの導入でgithub内でblogもportalも自動的にビルド＆デプロイされる。
簡単にはlazygitでpushでよい。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/cat73220/HW/actions&lt;/code&gt;でビルドの経過を細かに追跡できる。&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll/2022/04/03/reminder-how-to-use-bunder-and-jekyll.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll/2022/04/03/reminder-how-to-use-bunder-and-jekyll.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>再考、履歴改スキルセット</title>
        <description>&lt;p&gt;&lt;a href=&quot;/portfolio/2022/01/08/service-record.html&quot;&gt;履歴改業務歴&lt;/a&gt;で「スキルベースの判りやすい…マネージャークラスの人が見て…」が、「スキルセット」の目指すところ。&lt;/p&gt;

&lt;p&gt;何を伝えたいか？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;提供できるスキル&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;それらのスキルでできること&lt;/p&gt;

    &lt;p&gt;経験上（思い込みかもしれないが）、多くの人たちは私が示す「スキル」を見ても、それで何ができるのか想像できない。たとえ、作業風景や作業内容を直に見せたとしても、何が起きてるのか、何が起きたのか、どちらも分からないのだ。分からない、伝わらない、を前提に作っておけば、分かってもらえる、伝わる、可能性が高くなるか…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;「できること」は「事業」とか「改善案」とかの形がわかりやすいのでは？と思う&lt;/p&gt;

    &lt;p&gt;「できること」を専門用語で示しても、上述の繰り返しとなり伝わらない&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ボトムダウンの専門用語から説明を始めるより、具体的ではあるがより「世間的な」表現の説明が良いのだとおもう&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;就活で示す「スキルセット」 は専門用語寄りでいいか&lt;/p&gt;

    &lt;p&gt;就活用「スキルセット」と、世間に伝えたい「自分のしたいこと／できること」は分けて示した方がいいか&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;業務歴を元に、就活用「スキルセット」と世間宛「自分のしたいこと／できること」の２つを作る&lt;/strong&gt;…かな&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;就活はこの先あまり積極的にやりたいと思わない…お金を稼ぐのではなく「自給」に切り替える&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;「自給」方法の一つとして自分のスキルを役立てたいので、世間宛の自分のしたいこと／できること、を作る…かな&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/portfolio/2022/01/09/rethink-about-resume.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/portfolio/2022/01/09/rethink-about-resume.html</guid>
        
        
        <category>portfolio</category>
        
      </item>
    
      <item>
        <title>発芽酵素玄米</title>
        <description>&lt;p&gt;仲吉京子さんが「無毒の玄米ご飯を炊く」内容でFBに投稿していて、気になっていた。&lt;/p&gt;

&lt;p&gt;玄米は人に有害な物質を持っていて、炊飯してもそれらは保持され、経口すれば、体に影響が出るのは知っていた。冷え性もその影響の一つと改めて知ったのだが、おしっこ近いのはこれのせいか？&lt;/p&gt;

&lt;p&gt;幸せな生活を送るのが基本なので、毒を経口し続けるのはダメだね。おしっこに行く回数が多いのもダメだね。&lt;/p&gt;

&lt;p&gt;さて、仲吉京子さん投稿、彼女はWSで玄米の解毒方法を伝えてくれると言うのだ…WSに参加したい！と思ったけど火曜日なので行きづらく、なんとなく諦めた。&lt;/p&gt;

&lt;p&gt;さてさて、ではGoogって見ようではないか、と、「玄米炊飯 無毒化」で検索すると沢山の結果が…中でもこの２つが要領を得ていて&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://kawashima-ya.jp/contents/?p=6564&quot; target=&quot;_blank&quot;&gt;玄米のデメリット『毒』と言われる原因と、無毒化する炊き方&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://kawashima-ya.jp/contents/?p=438&quot; target=&quot;_blank&quot;&gt;酵素玄米の作り方｜炊飯器でもっちり美味しく作るコツ【管理栄養士監修】&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;対応方法がわかった\(^ ^)/&lt;/p&gt;

&lt;p&gt;無毒化には２通りあって&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;玄米 → 発芽玄米&lt;/p&gt;

    &lt;p&gt;玄米を常温で１２時間以上、水につけて「発芽」させる。「発芽」の過程で玄米自身から発せられる物質で毒素を無くすそうな。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;玄米 → ＋小豆 → 炊飯 → ３〜４日保温 → 酵素玄米&lt;/p&gt;

    &lt;p&gt;小豆と一緒に研いで、電子ジャーの玄米モードで炊飯し、そのまま３〜４日保温すると、小豆の酵素で毒素が無くなるそうな。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1は知らなかった。2も無毒化されるって知らなかった…けど、酵素玄米の炊き方はしていた。「３〜４日保温する」は意識してなかったな。&lt;/p&gt;

&lt;p&gt;さて、Amazonで「発芽酵素玄米」と称した商品が売られている。この商品は1と2が料理過程なのだな。そして、いま、両方の料理方法を知った。自分でやらないと。&lt;/p&gt;

&lt;p&gt;生活ペースを崩さずに導入しないと続かない。1と2で何がハードルか考えてみよう。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;発芽玄米&lt;/p&gt;

    &lt;p&gt;ハードルは、「料理する前日から仕込む」、ことかな。まぁ、それほどのハードルではないかな。&lt;/p&gt;

    &lt;p&gt;「ご飯が尽きる」と警戒する量を増やせばいいね。つまり、残ってるご飯の量を見て「炊こう」と思う日を繰り上げればいいね。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;酵素玄米&lt;/p&gt;

    &lt;p&gt;「３〜４日保温」だな。他は既に生活に取り入れられていてハードルじゃない。&lt;/p&gt;

    &lt;p&gt;食べるご飯と、酵素養生中のご飯と、２通り用意すればできると思う。&lt;/p&gt;

    &lt;p&gt;も一つは、1と組み合わせて「ご飯が尽きる」警戒日を「５〜６日手前」に修正する、かな。&lt;/p&gt;

    &lt;p&gt;酵素養生のための電子ジャーを買うか…Amazonで保温専用 電子ジャーというのがあるけど、容量が１升もあるし高額だな。炊飯電子ジャーだとピンきりで４０００円位から５合炊きがあるね、こっちだね。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「発芽酵素玄米」にかえたら３ヶ月様子見でおしっこに行く回数の減りが感じられるか、で効果を計るのだな。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;【追記】&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、2と同時に実行するのは、辛いか… 1だけならタイミングを変えるのと時間をかけるだけだね。…「発芽玄米」から始めるか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kawashima-ya.jp/contents/?p=42652&quot; target=&quot;_blank&quot;&gt;この記事によると&lt;/a&gt;「3. 玄米の胚芽部分がぷっくりと膨らんできたら発芽玄米の完成です」のようだ。これを目指そう。
&lt;img src=&quot;/images/hatsuga-genmai-wp13589_01-300x200.jpg&quot; alt=&quot;発芽玄米&quot; title=&quot;発芽してる玄米&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/dietary/2022/01/09/hatsuga-kouso-genmai.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/dietary/2022/01/09/hatsuga-kouso-genmai.html</guid>
        
        
        <category>dietary</category>
        
      </item>
    
      <item>
        <title>履歴改業務歴</title>
        <description>&lt;p&gt;職歴をresumeと称していたが、どうもしっくり来ない…勤務歴で辞書を引くと service history, work record, service record などが現れた… service recordに目が止まったので、これに変更することにした。&lt;/p&gt;

&lt;p&gt;resume(米国)、cv(欧州)なのだが、どちらも「学位」と それらの内容、論文とかかな、を一覧して、自分がどの様な専門知識を持っているかを表すんだな。&lt;/p&gt;

&lt;p&gt;いままで、「resume」と称して書き溜めたものを見直してみると、専門知識を一覧したのではなく、どの会社でどのプロジェクトで働いていた一覧であり、かつ、自分の勤務歴と各々の会社の簡単な説明をしてしまっている。&lt;/p&gt;

&lt;p&gt;と言うことで、「勤務歴(service record)」とリファクタリングした。おかげで、的を絞って書き加えていくことが出来た。名前付けは大事だ。的を得た命名をしていれば「すること」がはっきりする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/learning/jekyll-scss/2021/11/21/portal-resumes.html&quot;&gt;履歴のスタイル&lt;/a&gt;で始めた「勤務歴のportal」への移動はservice_recordとして完了した。&lt;/p&gt;

&lt;p&gt;ただし、この勤務歴はおおっぴらには公開しないことにした。あまりにも個人的すぎるからである。だが、これを完成したことで、自分がしてきたことがハッキリもした。これらは、このままおいておくこととする。&lt;/p&gt;

&lt;p&gt;portalにはportfolioとして自分のスキルを示したいので、この勤務歴を元に、改めてresumeを作ることにする。スキルベースの判りやすい…マネージャークラスの人が見て…ものにしたい。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/portfolio/2022/01/08/service-record.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/portfolio/2022/01/08/service-record.html</guid>
        
        
        <category>portfolio</category>
        
      </item>
    
      <item>
        <title>履歴のスタイル(jekyllでスタイルのカスタマイズ)</title>
        <description>&lt;p&gt;jekyllのスタイルのカスタマイズの知見が広がった… 結果にとても満足。&lt;/p&gt;

&lt;p&gt;jekyll標準スタイルのカスタマイズも、jekyll-agencyスタイルのカスタマイズにしても、ドキュメントで基本を知った上でそれらの実装を直接読むことが近道だった…どのコンピュータフレームワークもソースを理解することが近道だ…と判っていたのにドキュメントと作業で見えている物だけしか見ていないと、フレームワークで定義した部分は見えてこない、と言うことを再確認できて、かつ、思い知った。…既に、そして、何度も思い知ったんだけどなぁ〜&lt;/p&gt;

&lt;h4 id=&quot;_includedefaulthtmlと_layouts配下のhtml&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_include/default.html&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;配下の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt;が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt;に変換される過程で適用するファイルを示すと分かりやすいか&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume/*.md&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;冒頭の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;---&lt;/code&gt;区切り内&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout:&lt;/code&gt;で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;のファイルが決まる&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume&lt;/code&gt;としているので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume.html&lt;/code&gt;が選ばれる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/*.html&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;このhtmlに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;liquid&lt;/code&gt;と共に直にhtmlで記述しても良いが&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;liquid&lt;/code&gt;が利用できるので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt;も可能なのだ&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;に自分で決めた単位で細切れにhtmlを記述しておけばlayout毎に配置(layout)が変えられるのだな&lt;/li&gt;
      &lt;li&gt;このhtmlの冒頭の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;---&lt;/code&gt;セクション&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout&lt;/code&gt;を指定すると&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;のhtmlを指し示すことになる&lt;/li&gt;
      &lt;li&gt;ここのファイル名だけ異なる同じ内容のhtmlを記述すれば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt;で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout&lt;/code&gt;指定を違えていても、同じレイアウトにしてしまうことが出来る&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/*.html&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;htmlを記述する&lt;/li&gt;
      &lt;li&gt;ファイル冒頭の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;---&lt;/code&gt;セクションは解釈されない。最終的なhtmlを記述する、ということだろう&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;liquid&lt;/code&gt;も利用できる。制限もなさそうだ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;jekyll-agency-を追跡してみよう&quot;&gt;jekyll-agency を追跡してみよう&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: home&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;これしか記述されていない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/home.html&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;ここに全てのセクションが並んでいる&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; が順番に並んでいるだけ&lt;/li&gt;
      &lt;li&gt;html記述はない&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: default&lt;/code&gt;とある&lt;/li&gt;
      &lt;li&gt;作業ディレクトリ生成時にはこのファイルも存在していなかったかも…過去にインストールディレクトリからコピーしてきたな&lt;/li&gt;
      &lt;li&gt;無用なセクションをコメントアウトしてあるよ…以前はここで？？となったのだ。今日再度、冒頭の思い知りを経験してたんだ&lt;/li&gt;
      &lt;li&gt;つまり、元は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;jekyll-agencyインストールディレクトリ&amp;gt;_layouts/home.hmtl&lt;/code&gt;が利用されていた&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;にdefault.htmlが無い
    &lt;ul&gt;
      &lt;li&gt;ここで？？となってしまった…ドキュメントの登場である&lt;/li&gt;
      &lt;li&gt;「gemのインストールディレクトリ(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle infor jekyll-agency&lt;/code&gt;)のファイルが参照される」&lt;/li&gt;
      &lt;li&gt;この場合、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;のファイルの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout&lt;/code&gt;で指し示したので、インストールディレクトリ&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;のレイアウト名のファイル&lt;/li&gt;
      &lt;li&gt;つまり、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;jekyll-agencyインストールディレクトリ&amp;gt;_includes/default.hmtl&lt;/code&gt;が利用される&lt;/li&gt;
      &lt;li&gt;思い返せば、作業ディレクトリ生成時にはこのディレクトリ自体が無かったかも…以下同上同文&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;jekyll-agencyインストールディレクトリ&amp;gt;_includes/default.hmtl&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;htmlタグから始まる、ページ全体を記述する&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;liquid&lt;/code&gt;拡張されたhtmlファイルである&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;コンパイルで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt;で &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; や &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portfolio&lt;/code&gt; をレイアウトにしておくと「そんなレイアウトは無い」と警告される。&lt;/p&gt;

&lt;p&gt;でも、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt;レイアウトだけは警告されない。これはインストールディレクトリの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/page.html&lt;/code&gt;が存在してたからだった。&lt;/p&gt;

&lt;p&gt;ドキュメントとbundlerで生成した作業ディレクトリには現れないことで、注意（視野）をフレームワークにまで広げないと理解できなかった。&lt;/p&gt;

&lt;h4 id=&quot;ポータルでカスタマイズしたこと&quot;&gt;ポータルでカスタマイズしたこと&lt;/h4&gt;

&lt;p&gt;発端はresumeをblogから移動して、そのスタイルを整えることだった&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume/css/resume.scss&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/resume.html&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;layoutをdefaultとして、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume/css/resume.css&lt;/code&gt;を読み込むようにした&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これで、目的は果たされたけど、方法が判ったらblog側で追加した tableスタイルとか使いたいな〜とかblog側のpost/pageスタイルも流用したいな〜とか贅沢したくなる。&lt;/p&gt;

&lt;p&gt;贅沢は学習の糧なので、ためらわずに取り掛かろう&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt;にblogの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scss&lt;/code&gt;をコピー&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/resume.html&lt;/code&gt;を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/resume.html&lt;/code&gt;を利用するように変更
    &lt;ul&gt;
      &lt;li&gt;layout参照はdefault&lt;/li&gt;
      &lt;li&gt;jekyll-agencyの恩恵も授かれるように&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/resume.html&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;ここで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume/css/resume.css&lt;/code&gt;を読み込むようにした&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume.css&lt;/code&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog/css/main.scss&lt;/code&gt;と同じに&lt;/li&gt;
      &lt;li&gt;同じにすることで_sassのスタイルを利用できるようにした&lt;/li&gt;
      &lt;li&gt;これでblogのpage、post、table、hcol、mermaid、highlight-syntax、の恩恵を得られる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;これで今の所満足だ&quot;&gt;これで今の所満足だ&lt;/h4&gt;

&lt;p&gt;更なるカスタマイズも可能になった&lt;/p&gt;

&lt;p&gt;jekyllでWebサイト作る基礎が整ったかな&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll-scss/2021/11/22/portal-resume-style.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll-scss/2021/11/22/portal-resume-style.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll-scss</category>
        
      </item>
    
      <item>
        <title>履歴のスタイル</title>
        <description>&lt;p&gt;resume(職歴)のポータルへの移動を開始した。&lt;/p&gt;

&lt;p&gt;ポータルはテーマに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-agency&lt;/code&gt;を使っている。そのディレクトリ構造はドラスティックに変更してある。jekyllの標準のそれとは程遠く、scssファイルを新たに設けるのさえも戸惑った（笑）。&lt;/p&gt;

&lt;p&gt;jekyllの&lt;a href=&quot;https://jekyllrb.com/docs/assets/&quot;&gt;ドキュメント&lt;/a&gt;も不明瞭で、トライアンドエラーとなってしまったので、後学のためにメモを残しておこう。&lt;/p&gt;

&lt;h4 id=&quot;どこにscssファイルを置くのだろう&quot;&gt;どこにscssファイルを置くのだろう…&lt;/h4&gt;

&lt;p&gt;「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;css/styles.scss&lt;/code&gt;とscssファイルを作成すれば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;css/style.css&lt;/code&gt;に出力される」とあるが、なんの事やらさっぱりわからない。&lt;/p&gt;

&lt;p&gt;scssファイルだから、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layout&lt;/code&gt;とか&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_include&lt;/code&gt;に置くべきだろう（「だろう」←これ思い込みの印）、ということで、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layout/resume.scss&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_include/resume.scss&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;として、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layout/resume.html&lt;/code&gt;テンプレートで&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;% include resume.css %&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;link href=&quot;/asset/css/resume.css&quot; role=&quot;stylesheet&quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と記述するのだが、どの組み合わせもコンパイルでエラーとなる … 上↑の思い込みには気づいているのだが、自分の考えの間違いを総当りで確かめたい（笑）。性分ですな。…試す過程で色々調べるので学びも多い（笑）&lt;/p&gt;

&lt;h4 id=&quot;ドキュメントの通りだ&quot;&gt;ドキュメントの通りだ&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume/css/resume.scss&lt;/code&gt;に記述すれば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site/resume/css/resume.css&lt;/code&gt;に出力される（笑）。ドキュメントのとおりだね…例が欲しかったなぁ。&lt;/p&gt;

&lt;p&gt;ここにおいておけば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume&lt;/code&gt;のスタイルだねってすぐ分かると思う。未来の自分にも優しいはず。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layout/resume.html&lt;/code&gt;テンプレート冒頭で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;link href=&quot;css/resume.css&quot; role=&quot;stylesheet&quot; /&amp;gt;&lt;/code&gt;とすればスタイルが効くようになった。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;liquid&lt;/code&gt;の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page.title&lt;/code&gt;とかはそのまま問題なく利用可能。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt;を接頭するから&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume&lt;/code&gt;に変えるのかな〜と思ったけどハズレた。スタイルの名称とは切り離されている。&lt;/p&gt;

&lt;p&gt;linkタグに与えるパスは相対パスじゃダメだな… &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resume&lt;/code&gt;レイアウトはあちこちから利用するからサイトURLの絶対パスにしないと&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/resume/css/resume.css&quot; &amp;gt;&lt;/code&gt;とした。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog/_layout/portfolio.html&lt;/code&gt;を参考にした。&lt;/p&gt;

</description>
        <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/learning/jekyll-scss/2021/11/21/portal-resumes.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/learning/jekyll-scss/2021/11/21/portal-resumes.html</guid>
        
        
        <category>learning</category>
        
        <category>jekyll-scss</category>
        
      </item>
    
      <item>
        <title>ポータルの文章</title>
        <description>&lt;p&gt;ポータルに載せる文章を考えてみよう…取り掛かってみたら、直ぐに文章は浮かんでこず…方針を立てることにした。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/sitetext.yml&lt;/code&gt;の対応セクションを順に書き込んでいく。&lt;/p&gt;

&lt;p&gt;尚、このファイル&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data&lt;/code&gt;ディレクトリ配下のためか&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yml&lt;/code&gt;のため(こっちだな：設定ファイルだからだ)か、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--incremental --watch&lt;/code&gt;で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;を動作させても、自動ビルドされない。都度、コマンドラインでビルドすることにする。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;header.title &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Welcome to our Studio!&lt;/code&gt;→&lt;/li&gt;
  &lt;li&gt;header.text &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;It's nice to meet you&lt;/code&gt;→&lt;/li&gt;
  &lt;li&gt;header.button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tell me more&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;link先は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Services&lt;/code&gt;セクション→このままでいいな。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Services&lt;/code&gt;セクションに導く文章にしよう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.title &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Services&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;興味を持ってくれた人（クライアント…だけど、この言葉はあまり好きじゃないな）に、提供できるスキル…知識…とか、そお言う言葉だな&lt;/li&gt;
      &lt;li&gt;「クライアント」は「お客様」だよな…つまり &lt;strong&gt;必ず&lt;/strong&gt; お金のやり取りが生じると思うのだが… 受け取る対価はお金だけじゃないことを伝えたいな&lt;/li&gt;
      &lt;li&gt;日本語の他の言葉より&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;サービス&lt;/code&gt;の方が伝わりやすいのか…&lt;/li&gt;
      &lt;li&gt;大半の日本人の「サービス」の意味するところは「無料でXXを受けられる」と解釈することが多いような気がする…&lt;/li&gt;
      &lt;li&gt;対価はいただきたいので「サービス」は使いたくないかも&lt;/li&gt;
      &lt;li&gt;このセクションに、それらを並べるので、並べてから「題」を付けるのがいいかな…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.text &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lorem ipsum&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;上述の通り、ごちゃごちゃ考えたことを纏めた文章かな&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.list[0].&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;E-Commerce&lt;/code&gt;→ワンストップ試作
    &lt;ul&gt;
      &lt;li&gt;WebサービスもIoT装置も、左両方を組み合わせても、全てカバーします…みたいな&lt;/li&gt;
      &lt;li&gt;フルスタックを試作…かな&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.list[1].&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Responsive Design&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;「E-Commerce」も「Responsive Design」も具体的な気もするけど「フルスタック試作」とかよりは抽象的か…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.list[2].&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Markdown(へのリンク)&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;これは技術語だな…あまり気にしなくていいかも&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;services.list[*].icon&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fa fa-xxx&lt;/code&gt;→
    &lt;ul&gt;
      &lt;li&gt;Fontawesomeで対応する言葉を探すのもありだね&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容を考えていくのはこのまま続ければいいけど何時までも文章が決まらないな…　トップダウンだと具体的なものにし辛いか…　ゴールが遠く感じるのは作業を続けられなくなるので避けねば。&lt;/p&gt;

&lt;h4 id=&quot;具体的に挙げられるスキルを並べてみるか&quot;&gt;具体的に挙げられるスキルを並べてみるか…&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;職歴からボトムアップに整えたほうが具体性を保てるな…
    &lt;ul&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th&gt;&lt;strong&gt;社名&lt;/strong&gt;&lt;/th&gt;
              &lt;th&gt; &lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;トライテック&lt;/td&gt;
              &lt;td&gt;組み込み&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;コンピュータークリエーターズ&lt;/td&gt;
              &lt;td&gt;基礎研究・保守・3DCG&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;ネメシス&lt;/td&gt;
              &lt;td&gt;Unixアプリケーション・3DCG&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;eValley&lt;/td&gt;
              &lt;td&gt;携帯電話 OS・スマフォ ソフトウェア全般&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;エスマテックエンジニアリング&lt;/td&gt;
              &lt;td&gt;携帯電話 OS・スマフォ ソフトウェア全般&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;eFlow&lt;/td&gt;
              &lt;td&gt;携帯電話 OS・スマフォ ソフトウェア全般&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;aLab&lt;/td&gt;
              &lt;td&gt;組み込み&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;esp8266&lt;/td&gt;
              &lt;td&gt;IoT&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Adafruits&lt;/td&gt;
              &lt;td&gt;Unixデバイスドライバ&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;スペナビ&lt;/td&gt;
              &lt;td&gt;Webシステム&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Linero&lt;/td&gt;
              &lt;td&gt;Unixデバイスドライバ&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Plus-C&lt;/td&gt;
              &lt;td&gt;Webシステム&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;Delarco&lt;/td&gt;
              &lt;td&gt;組み込み&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;ImageMill&lt;/td&gt;
              &lt;td&gt;Webシステム&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;bizplace&lt;/td&gt;
              &lt;td&gt;Webシステム&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;3D着せ替え&lt;/td&gt;
              &lt;td&gt;Webシステム・3DCG&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;トライテック、コンピュータークリエーターズ、ネメシス、eValley、エスマテックエンジニアリング、eFlow、aLab、esp8266、Adafruits、スペナビ、Linero、Plus-C、Delarco、ImageMill、bizplace、3D着せ替え&lt;/li&gt;
      &lt;li&gt;これらの&lt;strong&gt;担当作業&lt;/strong&gt;と、 &lt;strong&gt;コンピュータースキル&lt;/strong&gt;にブレークダウンする&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;担当作業&lt;/strong&gt;から、提供可能サービスを概略出来るかな…方向性を幾つかに絞れば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serices.list[*].title&lt;/code&gt;にできそうだ&lt;/li&gt;
      &lt;li&gt;ここで整理したことはそのまま、portfolioやresumeに出来るな…というか、resume→portfolioの順に作ればいいね&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;resumeportfolioの順につくろう&quot;&gt;resume→portfolioの順につくろう&lt;/h4&gt;
</description>
        <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/remind/mymind/2021/11/20/portal-senteces.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/remind/mymind/2021/11/20/portal-senteces.html</guid>
        
        
        <category>remind</category>
        
        <category>mymind</category>
        
      </item>
    
  </channel>
</rss>
