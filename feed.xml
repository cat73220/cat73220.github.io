<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jumly integration</title>
    <description>Attempting jumly.js integration into jekyll.
</description>
    <link>https://cat73220.github.io/</link>
    <atom:link href="https://cat73220.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Nov 2021 04:15:05 +0000</pubDate>
    <lastBuildDate>Fri, 12 Nov 2021 04:15:05 +0000</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Github actions 完了</title>
        <description>&lt;h3 id=&quot;エディタの構文検証機能は大事だ&quot;&gt;エディタの構文検証機能は大事だ&lt;/h3&gt;

&lt;p&gt;gitコマンド実行でssh通信にシークレットを渡すシェルスクリプトには直ぐに行きあたれたのだが、いざ、Github Actionsで実行するとエラーが生じる。&lt;/p&gt;

&lt;p&gt;手元で実行しても問題ないが、Github Actionsは追加した行で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invalid workflow file&lt;/code&gt;をエラーを起こす… yamlファイル構文でインデント文字の統一 に気がつくのに思いの外時間を費やしてしまった。&lt;/p&gt;

&lt;p&gt;エディタで意識せずにタブキーを使っていたのと構文検証機能を yamlファイル に設定していなかったため、気にも停めていなかったことだった。追加の２行のインデントがタブ文字だったため、Github Actionsでエラーとなっていた（泣）。&lt;/p&gt;

&lt;h3 id=&quot;ssh--i-の与え方など&quot;&gt;ssh -i の与え方など&lt;/h3&gt;

&lt;p&gt;どの git サブコマンド が ssh通信するのか、よく調べていないのと、git -cをgitコマンド毎に記述するのは可読性が落ちることとが大きな理由で、デプロイ(commit/push)のステップでは環境変数(GIT_SSH_COMMAND)にした。&lt;/p&gt;

&lt;p&gt;手元でローカルに clone するのと少し違っているみたいで、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remote.origin.url&lt;/code&gt; が &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/config&lt;/code&gt; に記録されなかった。 …まだ、調べたりないな… 毎回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config retmote...&lt;/code&gt; を実行するようにした。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull/push&lt;/code&gt; のタイミングと &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; の仕方に手を入れたら、最後まで通るようになった。&lt;/p&gt;

&lt;p&gt;このポストが、公開ページで見られたら、一応、完成ってことだな。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt; 完成したよ！&lt;/p&gt;

</description>
        <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/larning/github/2021/11/12/github-action-succeeded.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/larning/github/2021/11/12/github-action-succeeded.html</guid>
        
        
        <category>larning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>Github actionsを試めしてみた</title>
        <description>&lt;h3 id=&quot;ほとんどこのガイドの１章目だけでできてしまうのだな&quot;&gt;ほとんど、この&lt;a href=&quot;https://docs.github.com/ja/actions/learn-github-actions/understanding-github-actions&quot;&gt;ガイドの１章目&lt;/a&gt;だけで、できてしまうのだな&lt;/h3&gt;

&lt;p&gt;test.ymlを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HW/.github/workflows&lt;/code&gt;に作って、pullした空の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.io&lt;/code&gt;リポジトリGITHUBIOディレクトリに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog&lt;/code&gt;を生成して、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -l&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -laF GITHBUIO&lt;/code&gt;を実行する&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt;アクションを作ってみた。&lt;/p&gt;

&lt;p&gt;pushすると、GithubのHW・Actionsページの左ペーンに、作ったばかりの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt;アクションの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name:&lt;/code&gt;欄が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All workflows&lt;/code&gt;の下に表示された。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All workflows&lt;/code&gt;がデフォルトで、全てのアクションの実行結果がコミットを１単位として行で並ぶ。TestアクションをクリックするとTestアクションの実行結果だけに絞られる。&lt;/p&gt;

&lt;p&gt;実行結果の行をクリックすると、まんまですね。実行結果がアクション図のアクティビティ単位で確認できた。いわゆるデバックプリントが得られた。&lt;/p&gt;

&lt;p&gt;Testアクションの不備、些細なタイポや確認ミス、等を直してコミットし直すと、実行結果行のコミット名左のアイコンが赤バツか緑チェックに変わる。&lt;/p&gt;

&lt;p&gt;lsくらいならさっさとできてしまった。cloneと生成は問題なく実行できた。まんま、Dockerでshellプログラミングしてるのと同じだ。&lt;/p&gt;

&lt;p&gt;あまりのあっけなさに、感動した&lt;/p&gt;

&lt;p&gt;…次に進むために頭を冷やさねば&lt;/p&gt;

&lt;h3 id=&quot;デプロイをしてみる&quot;&gt;デプロイをしてみる&lt;/h3&gt;

&lt;p&gt;頭も冷めないまま、deploy.ymlを作成しpushした。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1 Run &lt;span class=&quot;nv&quot;&gt;SOURCE_COMMIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%an: %B&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_SHA&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
20 remote: Permission to cat73220/cat73220.github.io.git denied to github-actions[bot].
21 fatal: unable to access &lt;span class=&quot;s1&quot;&gt;'https://github.com/cat73220/cat73220.github.io.git/'&lt;/span&gt;: The requested URL returned error: 403
22 Error: Process completed with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 128.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;エラーが出ました。 &lt;strong&gt;github.ioにコミットするための権限がありません&lt;/strong&gt; だそうな。&lt;/p&gt;

&lt;p&gt;さて。&lt;/p&gt;

&lt;p&gt;Googling by 「githubアクション 他のレポジトリにpushするための権限」&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://3nan3.github.io/post/2019122201_github_actions/&quot; target=&quot;_blank&quot;&gt;GitHub Actions で別のリポジトリに git push する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/HeRo/items/935d5e268208d411ab5a&quot; target=&quot;_blank&quot;&gt;Github Actionsの使い方メモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;沢山、ヒットした中から 上２リンク を選択。 …初めから読んでみるか…&lt;/p&gt;

&lt;p&gt;1で当たりっぽい。 tl;dr にしたいことが書いてあるね&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;tldr&quot;&gt;tl;dr&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;push先のレポジトリで、Settingsから Deploy keys （公開鍵）を登録&lt;/li&gt;
    &lt;li&gt;GitHub Actionsを設定するレポジトリで、Settingsの Secrets にDeploy keysに対応するの秘密鍵を登録&lt;/li&gt;
    &lt;li&gt;GitHub Actions用のymlをいい感じに書いてpushする&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;心配してたこともここで解消された。２行目「Actions…Settings…秘密鍵を登録」。これで、大丈夫でしょう。…一応、全部に目を通してみた。&lt;/p&gt;

&lt;p&gt;別リポジトリの権限周りが 想定外に複雑に実装されている。リポジトリ指定に登録した秘密鍵環境変数を渡すだけで良さそうな気が…&lt;/p&gt;

&lt;p&gt;… 環境変数名をリポジトリURLに当てはめるだけじゃダメだった… 環境変数名がシークレットに直接置き換わってリポジトリURLとしてエラーになってしまう。&lt;/p&gt;

&lt;p&gt;1の実装のように、gitを実行する際のsshでシークレットを参照するようにしないと、みたい。&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/larning/github/2021/11/11/testing-github-action.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/larning/github/2021/11/11/testing-github-action.html</guid>
        
        
        <category>larning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>【続き2】git pushをトリガーにGithub actionsでbuildとdeployする</title>
        <description>&lt;h3 id=&quot;先週の不明点&quot;&gt;先週の不明点&lt;/h3&gt;

&lt;p&gt;不明点だった、&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;このスクリプト&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.github/workflow/&amp;lt;..&amp;gt;.yml)&lt;/code&gt;のデバッグの仕方&lt;/li&gt;
  &lt;li&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/li&gt;
  &lt;li&gt;github pagesリポジトリでサブディレクトリで階層が別れていることに対応&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1も判明した。ついでに、2は訂正がある。&lt;/p&gt;

&lt;h4 id=&quot;このスクリプトgithubworkflowymlのデバッグの仕方&quot;&gt;「このスクリプト&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.github/workflow/&amp;lt;..&amp;gt;.yml)&lt;/code&gt;のデバッグの仕方」&lt;/h4&gt;

&lt;p&gt;先週の「次は、&lt;a href=&quot;https://docs.github.com/ja/actions&quot;&gt;ここ&lt;/a&gt;を読まないと」を初めから読むと書いてあった…ドキュメントは初めから読むものなのかねぇ…どーも、後から読んでしまう 😁。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.github.com/ja/actions/learn-github-actions/understanding-github-actions#viewing-the-jobs-activity&quot;&gt;ジョブのアクティビティを表示&lt;/a&gt;…つまり、usesとか、runとか、の動作とその出力を「アクティビティ」として、「アクティビティを表示」と表現してた。 &lt;strong&gt;デバッグ&lt;/strong&gt; なんて言わないんだね。&lt;/p&gt;

&lt;h4 id=&quot;gh-pagesブランチにデプロイとあるが別のgithub-pagesリポジトリにデプロイできないのか&quot;&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/h4&gt;

&lt;p&gt;対象リポジトリのgithub・setting・pagesでgithub-pageの対象にするブランチを決めることが出来る。このブランチを「gh-pagesブランチ」に設定ということであった。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;つまり、必ずgh-pagesブランチ ということではなく、任意である。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Github pages側の取り決めで、「gh-pages」ブランチにpushした内容が &amp;lt;…&amp;gt;.github.io のコンテンツとなる。かな。&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/larning/github/2021/11/11/continued-build-deploy-by-github-action.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/larning/github/2021/11/11/continued-build-deploy-by-github-action.html</guid>
        
        
        <category>larning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>【続き】git pushをトリガーにGithub actionsでbuildとdeployする</title>
        <description>&lt;h3 id=&quot;昨日の不明点&quot;&gt;昨日の不明点&lt;/h3&gt;

&lt;p&gt;不明点だった、&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;このスクリプト&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.github/workflow/&amp;lt;..&amp;gt;.yml)&lt;/code&gt;のデバッグの仕方&lt;/li&gt;
  &lt;li&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/li&gt;
  &lt;li&gt;github pagesリポジトリでサブディレクトリで階層が別れていることに対応&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このうち、2、3が判明した。&lt;/p&gt;

&lt;h4 id=&quot;gh-pagesブランチにデプロイとあるが別のgithub-pagesリポジトリにデプロイできないのか&quot;&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/h4&gt;

&lt;p&gt;対象リポジトリのgithub・setting・pagesでgithub-pageの対象にするブランチを決めることが出来る。このブランチを「gh-pagesブランチ」に設定ということであった。&lt;/p&gt;

&lt;p&gt;つまり、必ずgh-pagesブランチ ということではなく、任意である。&lt;/p&gt;

&lt;h4 id=&quot;github-pagesリポジトリでサブディレクトリで階層が別れていることに対応&quot;&gt;github pagesリポジトリでサブディレクトリで階層が別れていることに対応&lt;/h4&gt;

&lt;p&gt;actionsのyamlスクリプトの run節で可能である。また、uses節で指定するスクリプトの引数に存在すれば可能である。&lt;/p&gt;

&lt;p&gt;actionsで利用するdockerコンテナは おおよそubuntu等 linux系 を選ぶだろう、慣れてるからね。そこに構築する（されている）コマンド群は、手元のコマンド群と似たようなものにするだろう、なので、可能である。&lt;/p&gt;

&lt;h3 id=&quot;新たな課題&quot;&gt;新たな課題&lt;/h3&gt;

&lt;p&gt;ymlスクリプトのデバッグは、printfデバッグの方法を調べるだけなので、課題を纏めてみる。&lt;/p&gt;

&lt;p&gt;したいことは、&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;ローカル&lt;/strong&gt; のソースリポジトリで、成果物を &lt;strong&gt;ローカル&lt;/strong&gt; のgithub.ioリポジトリを生成先に指定して、ビルド&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ローカル&lt;/strong&gt; のgithub.ioリポジトリでgit push&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の２点。&lt;/p&gt;

&lt;p&gt;説明中「 &lt;strong&gt;ローカル&lt;/strong&gt; 」部分が「actions上のdockerコンテナ」に置き換わる。&lt;/p&gt;

&lt;p&gt;「actions上のdockerコンテナ」上には、ソースリポジトリとgithub.ioリポジトリをcloneするのだな。ここまでできればruns節で``bundle exec…`と記述すればよいだろう。&lt;/p&gt;

&lt;p&gt;次に「actions上のdockerコンテナ」上でリモート(github上)のgithub.ioリポジトリにpushするのだな。&lt;/p&gt;

&lt;p&gt;「actions上のdockerコンテナ」にローカルのgit(秘密鍵：~/.sshディレクトリ)+bundlerの環境を作れば出来るのか…&lt;/p&gt;

&lt;p&gt;必要なファイル群を選択してコピーするのか…めんどくさいなぁ&lt;/p&gt;

&lt;p&gt;参考にしているyamlファイルを眺めていると gitコマンドやbundler,jekyll(つまりrubyも) は&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;actions/checkout@2&lt;/li&gt;
  &lt;li&gt;actions/setup-ruby@1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をuses節で指定するだけのようである…それほど面倒くさくないかも&lt;/p&gt;

&lt;p&gt;煮詰まったのでキーワード「github-pages」を纏めてみることにした&lt;/p&gt;

&lt;h4 id=&quot;github-pagesについて&quot;&gt;github-pagesについて&lt;/h4&gt;

&lt;p&gt;このキーワードで２系統&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Githubが提供している「pages」機能&lt;/li&gt;
  &lt;li&gt;Github「pages」機能を便利に使うためのRuby Gemの名称&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;過去に、このGemをインストールしていて、インストールした理由を完全に忘れていて、解釈をごちゃ混ぜにしていた^^;）&lt;/p&gt;

&lt;p&gt;「pages」で想定している運用方法があって、それを Gem github-pages は容易にするように設計されている。&lt;/p&gt;

&lt;p&gt;ここで採ったgithub.ioでは「pages」の設定が存在しているが、これもまた、過去に設定した際の使い方を忘れている。&lt;/p&gt;

&lt;p&gt;実は「pages」を利用しなくて良いのでは… 再度「Github pages」で検索&lt;/p&gt;

&lt;p&gt;Githubの「pages」のドキュメントの冒頭に「GitHub Pages サンプル集」リンクがあって、何の気なしにクリックして、一覧ページに移動。Jekyllをクリックして、やはり、なんとなく&lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/.github/workflows/docs.yml&quot;&gt;「.github/workflows/docs.yml」&lt;/a&gt;と辿ってみると…ズバリの答えが出てきてしまった…自分が採っているgithub.ioと同じ運用方法でdocsを生成している。スクリプトで使ってるコマンドやその実行順序がスンナリと解釈できるの。問題を感じない。&lt;/p&gt;

&lt;p&gt;説明の各所に出てきたCNAMEの使い方はreactのgh-pagesブランチを見たらなんか、判ったかも。って思った。&lt;/p&gt;

&lt;p&gt;次は、&lt;a href=&quot;https://docs.github.com/ja/actions&quot;&gt;ここ&lt;/a&gt;を読まないと&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/larning/github/2021/11/06/continued-build-deploy-by-github-action.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/larning/github/2021/11/06/continued-build-deploy-by-github-action.html</guid>
        
        
        <category>larning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>git pushをトリガーにGithub actionsでbuildとdeployする</title>
        <description>&lt;h3 id=&quot;デプロイまでを自動化&quot;&gt;デプロイまでを自動化&lt;/h3&gt;

&lt;p&gt;makefileとか色々と古風な方法を思いついたのだが、検索すると circle ci/cd とか github actions 等がよくヒットした。勉強のため色々読んでみると、github-actionsでできそうな気配…基本以下のyamlファイルを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflow/&amp;lt;job名&amp;gt;.yml&lt;/code&gt;(job名は下の例で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages-deploy&lt;/code&gt;のこと)で記述して、このリポジトリにgit pushするだけで済むらしい。&lt;/p&gt;

&lt;p&gt;以下のyamlは&lt;a href=&quot;https://blog.toshimaru.net/jekyll-deploy-with-github-actions/&quot;&gt;この記事&lt;/a&gt;から拝借した。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;on:
  push:
    branches:
      - master
&lt;span class=&quot;nb&quot;&gt;jobs&lt;/span&gt;:
  gh-pages-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7
    - name: bundle &lt;span class=&quot;nb&quot;&gt;install
      &lt;/span&gt;run: |
        bundle config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;path &lt;span class=&quot;s1&quot;&gt;'vendor/bundle'&lt;/span&gt;
        bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
    - name: Jekyll Build
      run: bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        personal_token: &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
        publish_dir: ./_site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;不明点は&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;このスクリプトのデバッグの仕方&lt;/li&gt;
  &lt;li&gt;「gh-pagesブランチにデプロイ」とあるが、別のgithub pagesリポジトリにデプロイできないのか？&lt;/li&gt;
  &lt;li&gt;github pagesリポジトリでサブディレクトリで階層が別れていることに対応&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらが明確になれば、導入だな&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/larning/github/2021/11/05/build-deploy-by-github-action.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/larning/github/2021/11/05/build-deploy-by-github-action.html</guid>
        
        
        <category>larning</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>github.ioの運用</title>
        <description>&lt;h3 id=&quot;githubioの運用&quot;&gt;github.ioの運用&lt;/h3&gt;

&lt;p&gt;サブディレクトリ型URLで&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;github.io/直
    &lt;ul&gt;
      &lt;li&gt;ポータル&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;github.io/portfolio
    &lt;ul&gt;
      &lt;li&gt;スキル紹介ページ
        &lt;ul&gt;
          &lt;li&gt;組み込みスキルページ&lt;/li&gt;
          &lt;li&gt;Webページ作成スキルページ&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;github.io/blog
    &lt;ul&gt;
      &lt;li&gt;ブログ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の様に構成してみよう。&lt;/p&gt;

&lt;h3 id=&quot;githubioへのデプロイ&quot;&gt;github.ioへのデプロイ&lt;/h3&gt;

&lt;p&gt;現状の手作業&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/&amp;lt;...&amp;gt;/&amp;lt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll b
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/&amp;lt;...&amp;gt;/_site
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;cv - &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; github.io &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; -
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/&amp;lt;...&amp;gt;/github.io/&amp;lt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;*&amp;gt;&lt;/code&gt; を それぞれ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;直下&lt;/li&gt;
  &lt;li&gt;/blog&lt;/li&gt;
  &lt;li&gt;/portfolio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と三通りに分けて手動で実行しているのを&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/&amp;lt;...&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&amp;lt;ビルドコマンド&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&amp;lt;デプロイコマンド&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;の様に、ビルドコマンドとデプロイコマンドの２つに纏めよう。&lt;/p&gt;

&lt;p&gt;現状の手作業は、手順が多すぎで、更新と更新の期間が開くとこの手順を順番ごと全て忘れるため。&lt;/p&gt;

&lt;h3 id=&quot;開発ディレクトリの整理&quot;&gt;開発ディレクトリの整理&lt;/h3&gt;

&lt;p&gt;ビルドコマンドとデプロイコマンドに纏めるために、開発ディレクトリも構成し直そう。&lt;/p&gt;

&lt;p&gt;HW/blog、HW/blog/portfolioとHW/portalを&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HW/portal&lt;/li&gt;
  &lt;li&gt;HW/portfolio&lt;/li&gt;
  &lt;li&gt;HW/blog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にして、既存の blog と portal は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HW/portal-by-2111&lt;/li&gt;
  &lt;li&gt;HW/blog-by-2111&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と名前変更して保持する。&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/githubio/operation/2021/11/04/the-githubio-operation.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/githubio/operation/2021/11/04/the-githubio-operation.html</guid>
        
        
        <category>githubio</category>
        
        <category>operation</category>
        
      </item>
    
      <item>
        <title>Jekyllのサブコマンド</title>
        <description>&lt;h3 id=&quot;jekyllのサブコマンド&quot;&gt;jekyllのサブコマンド&lt;/h3&gt;

&lt;p&gt;サブコマンド s(serve)、b(build) 等に -s(–source)、-d(–destination) オプションを与えられる。&lt;/p&gt;

&lt;h4 id=&quot;-ssourceオプション&quot;&gt;-s(–source)オプション&lt;/h4&gt;

&lt;p&gt;jekyllソースディレクトリの指定。ソースディレクトリとは離れたディレクトリから上述のサブコマンドを実行できる&lt;/p&gt;

&lt;h4 id=&quot;-ddestinationオプション&quot;&gt;-d(–destination)オプション&lt;/h4&gt;

&lt;p&gt;生成先ディレクトリの指定。&lt;a href=&quot;/githubio/operation/2021/11/04/the-githubio-operation.html&quot;&gt;github.ioの運用&lt;/a&gt; で &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;...&amp;gt;github.io&amp;lt;*&amp;gt;&lt;/code&gt; を与えれば、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar cf ...&lt;/code&gt;が省ける&lt;/p&gt;

&lt;h4 id=&quot;実行例&quot;&gt;実行例&lt;/h4&gt;

&lt;p&gt;-sと-dは一緒に使うことが多いでしょう。-sだけで使うと作業ディレクトリに _site ディレクトリが自動生成されてしまう。別に構わないか…&lt;/p&gt;

&lt;p&gt;sサブコマンドであれば&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
blog
..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll s &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; blog &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; blog/_site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;の様にソースディレクトリ内に_siteディレクトリを生成させて、作業ディレクトリを汚染しないようにしたほうが気持ちいいかな。&lt;/p&gt;

&lt;p&gt;bサブコマンドでは&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll b &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; blog &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; ~/&amp;lt;...&amp;gt;githbu.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;の様に github.io 用のローカルレポジトリに生成させて、上述の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar cf ...&lt;/code&gt;を省くために使う。&lt;/p&gt;

&lt;p&gt;何方のオプションもサブコマンドの後に記述しないとならない。jekyllの仕様である。&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/larning/jekyll-theme/2021/11/04/jekyll-subcommands.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/larning/jekyll-theme/2021/11/04/jekyll-subcommands.html</guid>
        
        
        <category>larning</category>
        
        <category>jekyll-theme</category>
        
      </item>
    
      <item>
        <title>テーマの適用</title>
        <description>&lt;h3 id=&quot;jekyllのサイト&quot;&gt;jekyllの「サイト」&lt;/h3&gt;

&lt;p&gt;サイトはWebページのことで、_siteディレクトリに生成される一群のWebページのファイル群のこと&lt;/p&gt;

&lt;p&gt;サイトは、jekyllコマンドをダイレクトに&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new portal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のように実行する。newコマンドのあとの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portal&lt;/code&gt;がサイト名となる&lt;/p&gt;

&lt;p&gt;上の実行ではデフォルトで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;テーマが選ばれる&lt;/p&gt;

&lt;h3 id=&quot;テーマの変更gemfile版&quot;&gt;テーマの変更(Gemfile版)&lt;/h3&gt;

&lt;p&gt;Gemfile の &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;minima&quot;&lt;/code&gt; を &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-agency&lt;/code&gt; に変更&lt;/p&gt;

&lt;p&gt;_config.yml の &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theme: minima&lt;/code&gt; を &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theme: jekyll-agency&lt;/code&gt; に変更&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;portal
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で jekyll-agench をインストールする&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行して&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;をwebブラウザでアクセスすると、jekyll-agencyテーマで home ページが現れる&lt;/p&gt;

&lt;p&gt;この状態ではhomeページは空っぽでなんとも捉えようのない状態である&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/larning/jekyll-theme/2021/10/31/jekyll-themes.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/larning/jekyll-theme/2021/10/31/jekyll-themes.html</guid>
        
        
        <category>larning</category>
        
        <category>jekyll-theme</category>
        
      </item>
    
      <item>
        <title>github.io の更新手順備忘録</title>
        <description>&lt;h3 id=&quot;githubio-の更新手順備忘録&quot;&gt;github.io の更新手順備忘録&lt;/h3&gt;

&lt;p&gt;独自…なのだろうか、皆普通にこの手順なのかもしれない…の更新手順&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;blogディレクトリに移動&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundler exec jekyll b&lt;/code&gt; (最後の b は build の省略形： bundler exec jekyll -help でサブコマンドが一覧できる)
    &lt;ul&gt;
      &lt;li&gt;ただ単にbuildするだけで、hrefやimgタグのURLがgithub.ioに置き換わる&lt;/li&gt;
      &lt;li&gt;serve(ローカル確認)したまま、下述の tar を実行しないように。 上述URLが localhost のままである&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;blog/_siteディレクトリに移動
    &lt;ul&gt;
      &lt;li&gt;tarするコピー元ディレクトリはこちらにする。一番目のtarオプションに’*‘を与えているため。コピー先には新規追加したファイルが存在せず、想定している &lt;strong&gt;全コピー&lt;/strong&gt; が行われない。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar cf - * | tar -C &amp;lt;github.ioをクローンしたローカルリポジトリ&amp;gt; -tvf -&lt;/code&gt; で tar の動作を確認
    &lt;ul&gt;
      &lt;li&gt;-Cオプションに与えるパスは、相対パスではなく、ホームディレクトリからのパスが安全でしょう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;動作に問題なさそうなら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar cf - * | tar -C &amp;lt;github.ioをクローンしたローカルリポジトリ&amp;gt; -xvf - #(２番めのtarオプションをxvfに変更：eXtract)&lt;/code&gt;を実行&lt;/li&gt;
  &lt;li&gt;gitでdiffを確認する
    &lt;ul&gt;
      &lt;li&gt;気に入らなかったら、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --hard&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clean -fd&lt;/code&gt;で元に戻して、発見した気に入らない箇所への対応に戻る&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;git diff の結果に満足したら &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog/_site&lt;/code&gt;ディレクトリで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;を実行&lt;/li&gt;
  &lt;li&gt;すこーし待って github.io にwebブラウザでアクセス…反映されてなかったら、スーパーリロードしてみる&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/larning/jekyll/2021/10/30/update-posts-reminder.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/larning/jekyll/2021/10/30/update-posts-reminder.html</guid>
        
        
        <category>larning</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>そろそろテーマを変えてみようか…</title>
        <description>&lt;h3 id=&quot;jekyllテーマの候補&quot;&gt;Jekyllテーマの候補&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyllテーマ一覧&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;画面が横に広いので、コンテンツが中央に寄るテーマを探している&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raviriley.github.io/agency-jekyll-theme-starter/&quot;&gt;agency&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;コーポレイトサイトのポータル用。かっこいい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://golas.blog/&quot;&gt;simplex&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;blog用。かっこいい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yamt.netlify.app/&quot;&gt;YAMT&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;blog用だけど、色々、使い方を応用できそう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://artemsheludko.com/zolan/&quot;&gt;Zolan&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;これ又、blog用だけど、これも又、色々、使い方を応用できそう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
        <link>https://cat73220.github.io/larning/jekyll/2021/10/30/themes.html</link>
        <guid isPermaLink="true">https://cat73220.github.io/larning/jekyll/2021/10/30/themes.html</guid>
        
        
        <category>larning</category>
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
